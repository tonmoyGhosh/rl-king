/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/demo1/js/custom/widgets.bundle.js":
/*!************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/widgets.bundle.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n// Class definition\nvar KTCardsWidget1=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_card_widget_1_chart\");if(!element){return;}var color=element.getAttribute(\"data-kt-chart-color\");var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var baseColor=KTUtil.isHexColor(color)?color:KTUtil.getCssVariableValue(\"--bs-\"+color);var secondaryColor=KTUtil.getCssVariableValue(\"--bs-gray-300\");var options={series:[{name:\"Sales\",data:[30,75,55,45,30,60,75,50],margin:{left:5,right:5}}],chart:{fontFamily:\"inherit\",type:\"bar\",height:height,toolbar:{show:false},sparkline:{enabled:true}},plotOptions:{bar:{horizontal:false,columnWidth:[\"35%\"],borderRadius:6}},legend:{show:false},dataLabels:{enabled:false},stroke:{show:true,width:4,colors:[\"transparent\"]},xaxis:{axisBorder:{show:false},axisTicks:{show:false},labels:{show:false,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{show:false}},yaxis:{labels:{show:false,style:{colors:labelColor,fontSize:\"12px\"}}},fill:{type:\"solid\"},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},x:{formatter:function formatter(val){return\"Feb: \"+val;}},y:{formatter:function formatter(val){return val+\"%\";}}},colors:[baseColor,secondaryColor],grid:{borderColor:false,strokeDashArray:4,yaxis:{lines:{show:true}},padding:{top:10,left:25,right:25}}};// Set timeout to properly get the parent elements width\nvar chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},300);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTCardsWidget1;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTCardsWidget1.init();});\"use strict\";// Class definition\nvar KTCardsWidget10=function(){// Private methods\nvar initChart=function initChart(){var el=document.getElementById(\"kt_card_widget_10_chart\");if(!el){return;}var options={size:el.getAttribute(\"data-kt-size\")?parseInt(el.getAttribute(\"data-kt-size\")):70,lineWidth:el.getAttribute(\"data-kt-line\")?parseInt(el.getAttribute(\"data-kt-line\")):11,rotate:el.getAttribute(\"data-kt-rotate\")?parseInt(el.getAttribute(\"data-kt-rotate\")):145//percent:  el.getAttribute('data-kt-percent') ,\n};var canvas=document.createElement(\"canvas\");var span=document.createElement(\"span\");if(typeof G_vmlCanvasManager!==\"undefined\"){G_vmlCanvasManager.initElement(canvas);}var ctx=canvas.getContext(\"2d\");canvas.width=canvas.height=options.size;el.appendChild(span);el.appendChild(canvas);ctx.translate(options.size/2,options.size/2);// change center\nctx.rotate((-1/2+options.rotate/180)*Math.PI);// rotate -90 deg\n//imd = ctx.getImageData(0, 0, 240, 240);\nvar radius=(options.size-options.lineWidth)/2;var drawCircle=function drawCircle(color,lineWidth,percent){percent=Math.min(Math.max(0,percent||1),1);ctx.beginPath();ctx.arc(0,0,radius,0,Math.PI*2*percent,false);ctx.strokeStyle=color;ctx.lineCap=\"round\";// butt, round or square\nctx.lineWidth=lineWidth;ctx.stroke();};// Init\ndrawCircle(\"#E4E6EF\",options.lineWidth,100/100);drawCircle(KTUtil.getCssVariableValue(\"--bs-primary\"),options.lineWidth,100/150);drawCircle(KTUtil.getCssVariableValue(\"--bs-success\"),options.lineWidth,100/250);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTCardsWidget10;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTCardsWidget10.init();});\"use strict\";// Class definition\nvar KTCardWidget12=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_card_widget_12_chart\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-gray-800\");var lightColor=KTUtil.getCssVariableValue(\"--bs-success\");var options={series:[{name:\"Sales\",data:[3.5,5.7,2.8,5.9,4.2,5.6,4.3,4.5,5.9,4.5,5.7,4.8,5.7]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"solid\",opacity:0},stroke:{curve:\"smooth\",show:true,width:2,colors:[baseColor]},xaxis:{axisBorder:{show:false},axisTicks:{show:false},labels:{show:false},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{labels:{show:false}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},x:{formatter:function formatter(val){return\"Feb \"+val;}},y:{formatter:function formatter(val){return val*\"10\"+\"K\";}}},colors:[lightColor],grid:{strokeDashArray:4,padding:{top:0,right:-20,bottom:-20,left:-20},yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:2}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},300);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTCardWidget12;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTCardWidget12.init();});\"use strict\";// Class definition\nvar KTCardWidget13=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_card_widget_13_chart\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-gray-800\");var lightColor=KTUtil.getCssVariableValue(\"--bs-success\");var options={series:[{name:\"Shipments\",data:[1.5,4.5,2,3,2,4,2.5,2,2.5,4,3.5,4.5,2.5]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"solid\",opacity:0},stroke:{curve:\"smooth\",show:true,width:2,colors:[baseColor]},xaxis:{axisBorder:{show:false},axisTicks:{show:false},labels:{show:false},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{labels:{show:false}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},x:{formatter:function formatter(val){return\"Feb \"+val;}},y:{formatter:function formatter(val){return val*\"10\"+\"K\";}}},colors:[lightColor],grid:{strokeDashArray:4,padding:{top:0,right:-20,bottom:-20,left:-20},yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:2}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},300);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTCardWidget13;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTCardWidget13.init();});\"use strict\";// Class definition\nvar KTCardsWidget17=function(){// Private methods\nvar initChart=function initChart(){var el=document.getElementById(\"kt_card_widget_17_chart\");if(!el){return;}var options={size:el.getAttribute(\"data-kt-size\")?parseInt(el.getAttribute(\"data-kt-size\")):70,lineWidth:el.getAttribute(\"data-kt-line\")?parseInt(el.getAttribute(\"data-kt-line\")):11,rotate:el.getAttribute(\"data-kt-rotate\")?parseInt(el.getAttribute(\"data-kt-rotate\")):145//percent:  el.getAttribute('data-kt-percent') ,\n};var canvas=document.createElement(\"canvas\");var span=document.createElement(\"span\");if(typeof G_vmlCanvasManager!==\"undefined\"){G_vmlCanvasManager.initElement(canvas);}var ctx=canvas.getContext(\"2d\");canvas.width=canvas.height=options.size;el.appendChild(span);el.appendChild(canvas);ctx.translate(options.size/2,options.size/2);// change center\nctx.rotate((-1/2+options.rotate/180)*Math.PI);// rotate -90 deg\n//imd = ctx.getImageData(0, 0, 240, 240);\nvar radius=(options.size-options.lineWidth)/2;var drawCircle=function drawCircle(color,lineWidth,percent){percent=Math.min(Math.max(0,percent||1),1);ctx.beginPath();ctx.arc(0,0,radius,0,Math.PI*2*percent,false);ctx.strokeStyle=color;ctx.lineCap=\"round\";// butt, round or square\nctx.lineWidth=lineWidth;ctx.stroke();};// Init\ndrawCircle(\"#E4E6EF\",options.lineWidth,100/100);drawCircle(KTUtil.getCssVariableValue(\"--bs-primary\"),options.lineWidth,100/150);drawCircle(KTUtil.getCssVariableValue(\"--bs-success\"),options.lineWidth,100/250);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTCardsWidget17;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTCardsWidget17.init();});\"use strict\";// Class definition\nvar KTCardsWidget4=function(){// Private methods\nvar initChart=function initChart(){var el=document.getElementById(\"kt_card_widget_4_chart\");if(!el){return;}var options={size:el.getAttribute(\"data-kt-size\")?parseInt(el.getAttribute(\"data-kt-size\")):70,lineWidth:el.getAttribute(\"data-kt-line\")?parseInt(el.getAttribute(\"data-kt-line\")):11,rotate:el.getAttribute(\"data-kt-rotate\")?parseInt(el.getAttribute(\"data-kt-rotate\")):145//percent:  el.getAttribute('data-kt-percent') ,\n};var canvas=document.createElement(\"canvas\");var span=document.createElement(\"span\");if(typeof G_vmlCanvasManager!==\"undefined\"){G_vmlCanvasManager.initElement(canvas);}var ctx=canvas.getContext(\"2d\");canvas.width=canvas.height=options.size;el.appendChild(span);el.appendChild(canvas);ctx.translate(options.size/2,options.size/2);// change center\nctx.rotate((-1/2+options.rotate/180)*Math.PI);// rotate -90 deg\n//imd = ctx.getImageData(0, 0, 240, 240);\nvar radius=(options.size-options.lineWidth)/2;var drawCircle=function drawCircle(color,lineWidth,percent){percent=Math.min(Math.max(0,percent||1),1);ctx.beginPath();ctx.arc(0,0,radius,0,Math.PI*2*percent,false);ctx.strokeStyle=color;ctx.lineCap=\"round\";// butt, round or square\nctx.lineWidth=lineWidth;ctx.stroke();};// Init\ndrawCircle(\"#E4E6EF\",options.lineWidth,100/100);drawCircle(KTUtil.getCssVariableValue(\"--bs-danger\"),options.lineWidth,100/150);drawCircle(KTUtil.getCssVariableValue(\"--bs-primary\"),options.lineWidth,100/250);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTCardsWidget4;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTCardsWidget4.init();});\"use strict\";// Class definition\nvar KTCardsWidget6=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_card_widget_6_chart\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-primary\");var secondaryColor=KTUtil.getCssVariableValue(\"--bs-gray-300\");var options={series:[{name:\"Sales\",data:[30,60,53,45,60,75,53]}],chart:{fontFamily:\"inherit\",type:\"bar\",height:height,toolbar:{show:false},sparkline:{enabled:true}},plotOptions:{bar:{horizontal:false,columnWidth:[\"55%\"],borderRadius:6}},legend:{show:false},dataLabels:{enabled:false},stroke:{show:true,width:9,colors:[\"transparent\"]},xaxis:{axisBorder:{show:false},axisTicks:{show:false,tickPlacement:\"between\"},labels:{show:false,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{show:false}},yaxis:{labels:{show:false,style:{colors:labelColor,fontSize:\"12px\"}}},fill:{type:\"solid\"},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},x:{formatter:function formatter(val){return\"Feb: \"+val;}},y:{formatter:function formatter(val){return val+\"%\";}}},colors:[baseColor,secondaryColor],grid:{padding:{left:10,right:10},borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},300);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTCardsWidget6;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTCardsWidget6.init();});\"use strict\";// Class definition\nvar KTCardWidget8=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_card_widget_8_chart\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-gray-800\");var lightColor=KTUtil.getCssVariableValue(\"--bs-success\");var options={series:[{name:\"Sales\",data:[4.5,5.7,2.8,5.9,4.2,5.6,5.2,4.5,5.9,4.5,5.7,4.8,5.7]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"solid\",opacity:0},stroke:{curve:\"smooth\",show:true,width:2,colors:[baseColor]},xaxis:{axisBorder:{show:false},axisTicks:{show:false},labels:{show:false},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{labels:{show:false}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},x:{formatter:function formatter(val){return\"Feb \"+val;}},y:{formatter:function formatter(val){return\"$\"+val+\"K\";}}},colors:[lightColor],grid:{strokeDashArray:4,padding:{top:0,right:-20,bottom:-20,left:-20},yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:2}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},300);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTCardWidget8;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTCardWidget8.init();});\"use strict\";// Class definition\nvar KTCardWidget9=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_card_widget_9_chart\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-gray-800\");var lightColor=KTUtil.getCssVariableValue(\"--bs-success\");var options={series:[{name:\"Visitors\",data:[1.5,2.5,2,3,2,4,2.5,2,2.5,4,2.5,4.5,2.5]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"solid\",opacity:0},stroke:{curve:\"smooth\",show:true,width:2,colors:[baseColor]},xaxis:{axisBorder:{show:false},axisTicks:{show:false},labels:{show:false},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{labels:{show:false}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},x:{formatter:function formatter(val){return\"Feb \"+val;}},y:{formatter:function formatter(val){return val+\"K\";}}},colors:[lightColor],grid:{strokeDashArray:4,padding:{top:0,right:-20,bottom:-20,left:-20},yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:2}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},300);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTCardWidget9;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTCardWidget9.init();});\"use strict\";// Class definition\nvar KTChartsWidget1=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_1\");if(!element){return;}var negativeColor=element.hasAttribute(\"data-kt-negative-color\")?element.getAttribute(\"data-kt-negative-color\"):KTUtil.getCssVariableValue(\"--bs-success\");var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-primary\");var options={series:[{name:\"Subscribed\",data:[20,30,20,40,60,75,65,18,10,5,15,40,60,18,35,55,20]},{name:\"Unsubscribed\",data:[-20,-15,-5,-20,-30,-15,-10,-8,-5,-5,-10,-25,-15,-5,-10,-5,-15]}],chart:{fontFamily:\"inherit\",type:\"bar\",stacked:true,height:height,toolbar:{show:false}},plotOptions:{bar:{//horizontal: false,\ncolumnWidth:\"35%\",barHeight:\"70%\",borderRadius:[6,6]}},legend:{show:false},dataLabels:{enabled:false},xaxis:{categories:[\"Jan 5\",\"Jan 7\",\"Jan 9\",\"Jan 11\",\"Jan 13\",\"Jan 15\",\"Jan 17\",\"Jan 19\",\"Jan 20\",\"Jan 21\",\"Jan 23\",\"Jan 24\",\"Jan 25\",\"Jan 26\",\"Jan 24\",\"Jan 28\",\"Jan 29\"],axisBorder:{show:false},axisTicks:{show:false},tickAmount:10,labels:{//rotate: -45,\n//rotateAlways: true,\nstyle:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{show:false}},yaxis:{min:-50,max:80,tickAmount:6,labels:{style:{colors:labelColor,fontSize:\"12px\"},formatter:function formatter(val){return parseInt(val)+\"K\";}}},fill:{opacity:1},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\",borderRadius:4},y:{formatter:function formatter(val){if(val>0){return val+\"K\";}else{return Math.abs(val)+\"K\";}}}},colors:[baseColor,negativeColor],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget1;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget1.init();});\"use strict\";// Class definition\nvar KTChartsWidget10=function(){// Private methods\nvar initChart=function initChart(tabSelector,chartSelector,data,initByDefault){var element=document.querySelector(chartSelector);if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-900\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var options={series:[{name:\"Achieved Target\",data:data}],chart:{fontFamily:\"inherit\",type:\"bar\",height:height,toolbar:{show:false}},plotOptions:{bar:{horizontal:false,columnWidth:[\"22%\"],borderRadius:5,dataLabels:{position:\"top\"// top, center, bottom\n},startingShape:\"flat\"}},legend:{show:false},dataLabels:{enabled:true,offsetY:-30,style:{fontSize:\"13px\",colors:[\"labelColor\"]},formatter:function formatter(val){return val+\"K\";}},stroke:{show:true,width:2,colors:[\"transparent\"]},xaxis:{categories:[\"Metals\",\"Energy\",\"Agro\",\"Machines\",\"Transport\",\"Textile\",\"Wood\"],axisBorder:{show:false},axisTicks:{show:false},labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-500\"),fontSize:\"13px\"}},crosshairs:{fill:{gradient:{opacityFrom:0,opacityTo:0}}}},yaxis:{labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-500\"),fontSize:\"13px\"},formatter:function formatter(val){return parseInt(val)+\"K\";}}},fill:{opacity:1},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return+val+\"K\";}}},colors:[KTUtil.getCssVariableValue(\"--bs-primary\"),KTUtil.getCssVariableValue(\"--bs-light-primary\")],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}}};var chart=new ApexCharts(element,options);var init=false;var tab=document.querySelector(tabSelector);if(initByDefault===true){chart.render();init=true;}tab.addEventListener(\"shown.bs.tab\",function(event){if(init==false){chart.render();init=true;}});};// Public methods\nreturn{init:function init(){initChart(\"#kt_charts_widget_10_tab_1\",\"#kt_charts_widget_10_chart_1\",[30,18,43,70,13,37,23],true);initChart(\"#kt_charts_widget_10_tab_2\",\"#kt_charts_widget_10_chart_2\",[25,55,35,50,45,20,31],false);initChart(\"#kt_charts_widget_10_tab_3\",\"#kt_charts_widget_10_chart_3\",[45,15,35,70,45,50,21],false);initChart(\"#kt_charts_widget_10_tab_4\",\"#kt_charts_widget_10_chart_4\",[15,55,25,50,25,60,31],false);}};}();// Webpack support\nif(true){module.exports=KTChartsWidget10;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget10.init();});\"use strict\";// Class definition\nvar KTChartsWidget11=function(){// Private methods\nvar initChart=function initChart(tabSelector,chartSelector,data,initByDefault){var element=document.querySelector(chartSelector);var height=parseInt(KTUtil.css(element,\"height\"));if(!element){return;}var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-success\");var lightColor=KTUtil.getCssVariableValue(\"--bs-success\");var options={series:[{name:\"Deliveries\",data:data}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},plotOptions:{},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"gradient\",gradient:{shadeIntensity:1,opacityFrom:0.3,opacityTo:0.7,stops:[0,90,100]}},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:[\"\",\"Apr 02\",\"Apr 06\",\"Apr 06\",\"Apr 05\",\"Apr 06\",\"Apr 10\",\"Apr 08\",\"Apr 09\",\"Apr 14\",\"Apr 10\",\"Apr 12\",\"Apr 18\",\"Apr 14\",\"Apr 15\",\"Apr 14\",\"Apr 17\",\"Apr 18\",\"Apr 02\",\"Apr 06\",\"Apr 18\",\"Apr 05\",\"Apr 06\",\"Apr 10\",\"Apr 08\",\"Apr 22\",\"Apr 14\",\"Apr 11\",\"Apr 12\",\"\"],axisBorder:{show:false},axisTicks:{show:false},tickAmount:5,labels:{rotate:0,rotateAlways:true,style:{colors:labelColor,fontSize:\"13px\"}},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"13px\"}}},yaxis:{tickAmount:4,max:24,min:10,labels:{style:{colors:labelColor,fontSize:\"13px\"}}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return+val;}}},colors:[lightColor],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:3}};var chart=new ApexCharts(element,options);var init=false;var tab=document.querySelector(tabSelector);if(initByDefault===true){chart.render();init=true;}tab.addEventListener(\"shown.bs.tab\",function(event){if(init==false){chart.render();init=true;}});};// Public methods\nreturn{init:function init(){initChart(\"#kt_chart_widget_11_tab_1\",\"#kt_chart_widget_11_chart_1\",[16,19,19,16,16,14,15,15,17,17,19,19,18,18,20,20,18,18,22,22,20,20,18,18,20,20,18,20,20,22],false);initChart(\"#kt_chart_widget_11_tab_2\",\"#kt_chart_widget_11_chart_2\",[18,18,20,20,18,18,22,22,20,20,18,18,20,20,18,18,20,20,22,15,18,18,17,17,15,15,17,17,19,17],false);initChart(\"#kt_chart_widget_11_tab_3\",\"#kt_chart_widget_11_chart_3\",[17,20,20,19,19,17,17,19,19,21,21,19,19,21,21,18,18,16,17,17,19,19,21,21,19,19,17,17,18,18],true);}};}();// Webpack support\nif(true){module.exports=KTChartsWidget11;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget11.init();});\"use strict\";// Class definition\nvar KTChartsWidget12=function(){// Private methods\nvar initChart=function initChart(tabSelector,chartSelector,data,initByDefault){var element=document.querySelector(chartSelector);if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-900\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var options={series:[{name:\"Deliveries\",data:data}],chart:{fontFamily:\"inherit\",type:\"bar\",height:height,toolbar:{show:false}},plotOptions:{bar:{horizontal:false,columnWidth:[\"22%\"],borderRadius:5,dataLabels:{position:\"top\"// top, center, bottom\n},startingShape:\"flat\"}},legend:{show:false},dataLabels:{enabled:true,offsetY:-28,style:{fontSize:\"13px\",colors:[\"labelColor\"]},formatter:function formatter(val){return val+\"K\";}},stroke:{show:true,width:2,colors:[\"transparent\"]},xaxis:{categories:[\"Grossey\",\"Pet Food\",\"Flowers\",\"Restaurant\",\"Kids Toys\",\"Clothing\",\"Still Water\"],axisBorder:{show:false},axisTicks:{show:false},labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-500\"),fontSize:\"13px\"}},crosshairs:{fill:{gradient:{opacityFrom:0,opacityTo:0}}}},yaxis:{labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-500\"),fontSize:\"13px\"},formatter:function formatter(val){return val+\"K\";}}},fill:{opacity:1},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return+val+\"K\";}}},colors:[KTUtil.getCssVariableValue(\"--bs-primary\"),KTUtil.getCssVariableValue(\"--bs-light-primary\")],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}}};var chart=new ApexCharts(element,options);var init=false;var tab=document.querySelector(tabSelector);if(initByDefault===true){chart.render();init=true;}tab.addEventListener(\"shown.bs.tab\",function(event){if(init==false){chart.render();init=true;}});};// Public methods\nreturn{init:function init(){initChart(\"#kt_charts_widget_12_tab_1\",\"#kt_charts_widget_12_chart_1\",[54,42,75,110,23,87,50],true);initChart(\"#kt_charts_widget_12_tab_2\",\"#kt_charts_widget_12_chart_2\",[25,55,35,50,45,20,31],false);initChart(\"#kt_charts_widget_12_tab_3\",\"#kt_charts_widget_12_chart_3\",[45,15,35,70,45,50,21],false);}};}();// Webpack support\nif(true){module.exports=KTChartsWidget12;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget12.init();});\"use strict\";// Class definition\nvar KTChartsWidget13=function(){// Private methods\nvar initChart=function initChart(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_13_chart\");if(!element){return;}am5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/xy-chart/\nvar chart=root.container.children.push(am5xy.XYChart[\"new\"](root,{panX:true,panY:true,wheelX:\"panX\",wheelY:\"zoomX\"}));// Add cursor\n// https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/\nvar cursor=chart.set(\"cursor\",am5xy.XYCursor[\"new\"](root,{behavior:\"none\"}));cursor.lineY.set(\"visible\",false);// The data\nvar data=[{year:\"2003\",cars:1587,motorcycles:650,bicycles:121},{year:\"2004\",cars:1567,motorcycles:683,bicycles:146},{year:\"2005\",cars:1617,motorcycles:691,bicycles:138},{year:\"2006\",cars:1630,motorcycles:642,bicycles:127},{year:\"2007\",cars:1660,motorcycles:699,bicycles:105},{year:\"2008\",cars:1683,motorcycles:721,bicycles:109},{year:\"2009\",cars:1691,motorcycles:737,bicycles:112},{year:\"2010\",cars:1298,motorcycles:680,bicycles:101},{year:\"2011\",cars:1275,motorcycles:664,bicycles:97},{year:\"2012\",cars:1246,motorcycles:648,bicycles:93},{year:\"2013\",cars:1318,motorcycles:697,bicycles:111},{year:\"2014\",cars:1213,motorcycles:633,bicycles:87},{year:\"2015\",cars:1199,motorcycles:621,bicycles:79},{year:\"2016\",cars:1110,motorcycles:210,bicycles:81},{year:\"2017\",cars:1165,motorcycles:232,bicycles:75},{year:\"2018\",cars:1145,motorcycles:219,bicycles:88},{year:\"2019\",cars:1163,motorcycles:201,bicycles:82},{year:\"2020\",cars:1180,motorcycles:285,bicycles:87},{year:\"2021\",cars:1159,motorcycles:277,bicycles:71}];console.log(data);// Create axes\n// https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\nvar xAxis=chart.xAxes.push(am5xy.CategoryAxis[\"new\"](root,{categoryField:\"year\",startLocation:0.5,endLocation:0.5,renderer:am5xy.AxisRendererX[\"new\"](root,{}),tooltip:am5.Tooltip[\"new\"](root,{})}));xAxis.get(\"renderer\").grid.template.setAll({disabled:true,strokeOpacity:0});xAxis.get(\"renderer\").labels.template.setAll({fontWeight:\"400\",fontSize:13,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});xAxis.data.setAll(data);var yAxis=chart.yAxes.push(am5xy.ValueAxis[\"new\"](root,{renderer:am5xy.AxisRendererY[\"new\"](root,{})}));yAxis.get(\"renderer\").grid.template.setAll({stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-300\")),strokeWidth:1,strokeOpacity:1,strokeDasharray:[3]});yAxis.get(\"renderer\").labels.template.setAll({fontWeight:\"400\",fontSize:13,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});// Add series\n// https://www.amcharts.com/docs/v5/charts/xy-chart/series/\nfunction createSeries(name,field,color){var series=chart.series.push(am5xy.LineSeries[\"new\"](root,{name:name,xAxis:xAxis,yAxis:yAxis,stacked:true,valueYField:field,categoryXField:\"year\",fill:am5.color(color),tooltip:am5.Tooltip[\"new\"](root,{pointerOrientation:\"horizontal\",labelText:\"[bold]{name}[/]\\n{categoryX}: {valueY}\"})}));series.fills.template.setAll({fillOpacity:0.5,visible:true});series.data.setAll(data);series.appear(1000);}createSeries(\"Cars\",\"cars\",KTUtil.getCssVariableValue(\"--bs-primary\"));createSeries(\"Motorcycles\",\"motorcycles\",KTUtil.getCssVariableValue(\"--bs-success\"));createSeries(\"Bicycles\",\"bicycles\",KTUtil.getCssVariableValue(\"--bs-warning\"));// Add scrollbar\n// https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/\nvar scrollbarX=chart.set(\"scrollbarX\",am5.Scrollbar[\"new\"](root,{orientation:\"horizontal\",marginBottom:25,height:8}));// Create axis ranges\n// https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/\nvar rangeDataItem=xAxis.makeDataItem({category:\"2016\",endCategory:\"2021\"});var range=xAxis.createAxisRange(rangeDataItem);rangeDataItem.get(\"grid\").setAll({stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-200\")),strokeOpacity:0.5,strokeDasharray:[3]});rangeDataItem.get(\"axisFill\").setAll({fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-200\")),fillOpacity:0.1});rangeDataItem.get(\"label\").setAll({inside:true,text:\"Fines increased\",rotation:90,centerX:am5.p100,centerY:am5.p100,location:0,paddingBottom:10,paddingRight:15});var rangeDataItem2=xAxis.makeDataItem({category:\"2021\"});var range2=xAxis.createAxisRange(rangeDataItem2);rangeDataItem2.get(\"grid\").setAll({stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-danger\")),strokeOpacity:1,strokeDasharray:[3]});rangeDataItem2.get(\"label\").setAll({inside:true,text:\"Fee introduced\",rotation:90,centerX:am5.p100,centerY:am5.p100,location:0,paddingBottom:10,paddingRight:15});// Make stuff animate on load\n// https://www.amcharts.com/docs/v5/concepts/animations/\nchart.appear(1000,100);});// end am5.ready()\n};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget13;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget13.init();});\"use strict\";// Class definition\nvar KTChartsWidget14=function(){// Private methods\nvar initChart=function initChart(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_14_chart\");if(!element){return;}am5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/radar-chart/\nvar chart=root.container.children.push(am5radar.RadarChart[\"new\"](root,{panX:false,panY:false,wheelX:\"panX\",wheelY:\"zoomX\",innerRadius:am5.percent(20),startAngle:-90,endAngle:180}));// Data\nvar data=[{category:\"Research\",value:80,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-info\"))}},{category:\"Marketing\",value:35,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-danger\"))}},{category:\"Distribution\",value:92,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{category:\"Human Resources\",value:68,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))}}];// Add cursor\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Cursor\nvar cursor=chart.set(\"cursor\",am5radar.RadarCursor[\"new\"](root,{behavior:\"zoomX\"}));cursor.lineY.set(\"visible\",false);// Create axes and their renderers\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_axes\nvar xRenderer=am5radar.AxisRendererCircular[\"new\"](root,{//minGridDistance: 50\n});xRenderer.labels.template.setAll({radius:10});xRenderer.grid.template.setAll({forceHidden:true});var xAxis=chart.xAxes.push(am5xy.ValueAxis[\"new\"](root,{renderer:xRenderer,min:0,max:100,strictMinMax:true,numberFormat:\"#'%'\",tooltip:am5.Tooltip[\"new\"](root,{})}));var yRenderer=am5radar.AxisRendererRadial[\"new\"](root,{minGridDistance:20});yRenderer.labels.template.setAll({centerX:am5.p100,fontWeight:\"500\",fontSize:18,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\")),templateField:\"columnSettings\"});yRenderer.grid.template.setAll({forceHidden:true});var yAxis=chart.yAxes.push(am5xy.CategoryAxis[\"new\"](root,{categoryField:\"category\",renderer:yRenderer}));yAxis.data.setAll(data);// Create series\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_series\nvar series1=chart.series.push(am5radar.RadarColumnSeries[\"new\"](root,{xAxis:xAxis,yAxis:yAxis,clustered:false,valueXField:\"full\",categoryYField:\"category\",fill:root.interfaceColors.get(\"alternativeBackground\")}));series1.columns.template.setAll({width:am5.p100,fillOpacity:0.08,strokeOpacity:0,cornerRadius:20});series1.data.setAll(data);var series2=chart.series.push(am5radar.RadarColumnSeries[\"new\"](root,{xAxis:xAxis,yAxis:yAxis,clustered:false,valueXField:\"value\",categoryYField:\"category\"}));series2.columns.template.setAll({width:am5.p100,strokeOpacity:0,tooltipText:\"{category}: {valueX}%\",cornerRadius:20,templateField:\"columnSettings\"});series2.data.setAll(data);// Animate chart and series in\n// https://www.amcharts.com/docs/v5/concepts/animations/#Initial_animation\nseries1.appear(1000);series2.appear(1000);chart.appear(1000,100);});};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget14;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget14.init();});\"use strict\";// Class definition\nvar KTChartsWidget15=function(){// Private methods\nvar initChart=function initChart(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_15_chart\");if(!element){return;}am5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/xy-chart/\nvar chart=root.container.children.push(am5xy.XYChart[\"new\"](root,{panX:false,panY:false,//wheelX: \"panX\",\n//wheelY: \"zoomX\",\nlayout:root.verticalLayout}));// Data\nvar colors=chart.get(\"colors\");var data=[{country:\"US\",visits:725,icon:\"https://www.amcharts.com/wp-content/uploads/flags/united-states.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{country:\"UK\",visits:625,icon:\"https://www.amcharts.com/wp-content/uploads/flags/united-kingdom.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{country:\"China\",visits:602,icon:\"https://www.amcharts.com/wp-content/uploads/flags/china.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{country:\"Japan\",visits:509,icon:\"https://www.amcharts.com/wp-content/uploads/flags/japan.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{country:\"Germany\",visits:322,icon:\"https://www.amcharts.com/wp-content/uploads/flags/germany.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{country:\"France\",visits:214,icon:\"https://www.amcharts.com/wp-content/uploads/flags/france.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{country:\"India\",visits:204,icon:\"https://www.amcharts.com/wp-content/uploads/flags/india.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{country:\"Spain\",visits:200,icon:\"https://www.amcharts.com/wp-content/uploads/flags/spain.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{country:\"Italy\",visits:165,icon:\"https://www.amcharts.com/wp-content/uploads/flags/italy.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{country:\"Russia\",visits:152,icon:\"https://www.amcharts.com/wp-content/uploads/flags/russia.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{country:\"Norway\",visits:125,icon:\"https://www.amcharts.com/wp-content/uploads/flags/norway.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{country:\"Canada\",visits:99,icon:\"https://www.amcharts.com/wp-content/uploads/flags/canada.svg\",columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}}];// Create axes\n// https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\nvar xAxis=chart.xAxes.push(am5xy.CategoryAxis[\"new\"](root,{categoryField:\"country\",renderer:am5xy.AxisRendererX[\"new\"](root,{minGridDistance:30}),bullet:function bullet(root,axis,dataItem){return am5xy.AxisBullet[\"new\"](root,{location:0.5,sprite:am5.Picture[\"new\"](root,{width:24,height:24,centerY:am5.p50,centerX:am5.p50,src:dataItem.dataContext.icon})});}}));xAxis.get(\"renderer\").labels.template.setAll({paddingTop:20,fontWeight:\"400\",fontSize:10,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});xAxis.get(\"renderer\").grid.template.setAll({disabled:true,strokeOpacity:0});xAxis.data.setAll(data);var yAxis=chart.yAxes.push(am5xy.ValueAxis[\"new\"](root,{renderer:am5xy.AxisRendererY[\"new\"](root,{})}));yAxis.get(\"renderer\").grid.template.setAll({stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-300\")),strokeWidth:1,strokeOpacity:1,strokeDasharray:[3]});yAxis.get(\"renderer\").labels.template.setAll({fontWeight:\"400\",fontSize:10,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});// Add series\n// https://www.amcharts.com/docs/v5/charts/xy-chart/series/\nvar series=chart.series.push(am5xy.ColumnSeries[\"new\"](root,{xAxis:xAxis,yAxis:yAxis,valueYField:\"visits\",categoryXField:\"country\"}));series.columns.template.setAll({tooltipText:\"{categoryX}: {valueY}\",tooltipY:0,strokeOpacity:0,templateField:\"columnSettings\"});series.columns.template.setAll({strokeOpacity:0,cornerRadiusBR:0,cornerRadiusTR:6,cornerRadiusBL:0,cornerRadiusTL:6});series.data.setAll(data);// Make stuff animate on load\n// https://www.amcharts.com/docs/v5/concepts/animations/\nseries.appear();chart.appear(1000,100);});};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget15;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget15.init();});\"use strict\";// Class definition\nvar KTChartsWidget16=function(){// Private methods\nvar initChart=function initChart(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_16_chart\");if(!element){return;}am5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/xy-chart/\nvar chart=root.container.children.push(am5xy.XYChart[\"new\"](root,{panX:false,panY:false,wheelX:\"panX\",wheelY:\"zoomX\",layout:root.verticalLayout}));var colors=chart.get(\"colors\");var data=[{country:\"US\",visits:725},{country:\"UK\",visits:625},{country:\"China\",visits:602},{country:\"Japan\",visits:509},{country:\"Germany\",visits:322},{country:\"France\",visits:214},{country:\"India\",visits:204},{country:\"Spain\",visits:198},{country:\"Italy\",visits:165},{country:\"Russia\",visits:130},{country:\"Norway\",visits:93},{country:\"Canada\",visits:41}];prepareParetoData();function prepareParetoData(){var total=0;for(var i=0;i<data.length;i++){var value=data[i].visits;total+=value;}var sum=0;for(var i=0;i<data.length;i++){var value=data[i].visits;sum+=value;data[i].pareto=sum/total*100;}}// Create axes\n// https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\nvar xAxis=chart.xAxes.push(am5xy.CategoryAxis[\"new\"](root,{categoryField:\"country\",renderer:am5xy.AxisRendererX[\"new\"](root,{minGridDistance:30})}));xAxis.get(\"renderer\").labels.template.setAll({paddingTop:10,fontWeight:\"400\",fontSize:13,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});xAxis.get(\"renderer\").grid.template.setAll({disabled:true,strokeOpacity:0});xAxis.data.setAll(data);var yAxis=chart.yAxes.push(am5xy.ValueAxis[\"new\"](root,{renderer:am5xy.AxisRendererY[\"new\"](root,{})}));yAxis.get(\"renderer\").labels.template.setAll({paddingLeft:10,fontWeight:\"400\",fontSize:13,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});yAxis.get(\"renderer\").grid.template.setAll({stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-300\")),strokeWidth:1,strokeOpacity:1,strokeDasharray:[3]});var paretoAxisRenderer=am5xy.AxisRendererY[\"new\"](root,{opposite:true});var paretoAxis=chart.yAxes.push(am5xy.ValueAxis[\"new\"](root,{renderer:paretoAxisRenderer,min:0,max:100,strictMinMax:true}));paretoAxis.get(\"renderer\").labels.template.setAll({fontWeight:\"400\",fontSize:13,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});paretoAxisRenderer.grid.template.set(\"forceHidden\",true);paretoAxis.set(\"numberFormat\",\"#'%\");// Add series\n// https://www.amcharts.com/docs/v5/charts/xy-chart/series/\nvar series=chart.series.push(am5xy.ColumnSeries[\"new\"](root,{xAxis:xAxis,yAxis:yAxis,valueYField:\"visits\",categoryXField:\"country\"}));series.columns.template.setAll({tooltipText:\"{categoryX}: {valueY}\",tooltipY:0,strokeOpacity:0,cornerRadiusTL:6,cornerRadiusTR:6});series.columns.template.adapters.add(\"fill\",function(fill,target){return chart.get(\"colors\").getIndex(series.dataItems.indexOf(target.dataItem));});// pareto series\nvar paretoSeries=chart.series.push(am5xy.LineSeries[\"new\"](root,{xAxis:xAxis,yAxis:paretoAxis,valueYField:\"pareto\",categoryXField:\"country\",stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-dark\")),maskBullets:false}));paretoSeries.bullets.push(function(){return am5.Bullet[\"new\"](root,{locationY:1,sprite:am5.Circle[\"new\"](root,{radius:5,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\")),stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-dark\"))})});});series.data.setAll(data);paretoSeries.data.setAll(data);// Make stuff animate on load\n// https://www.amcharts.com/docs/v5/concepts/animations/\nseries.appear();chart.appear(1000,100);});};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget16;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget16.init();});\"use strict\";// Class definition\nvar KTChartsWidget17=function(){// Private methods\nvar initChart=function initChart(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_17_chart\");if(!element){return;}am5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/\n// start and end angle must be set both for chart and series\nvar chart=root.container.children.push(am5percent.PieChart[\"new\"](root,{startAngle:180,endAngle:360,layout:root.verticalLayout,innerRadius:am5.percent(50)}));// Create series\n// https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Series\n// start and end angle must be set both for chart and series\nvar series=chart.series.push(am5percent.PieSeries[\"new\"](root,{startAngle:180,endAngle:360,valueField:\"value\",categoryField:\"category\",alignLabels:false}));series.labels.template.setAll({fontWeight:\"400\",fontSize:13,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});series.states.create(\"hidden\",{startAngle:180,endAngle:180});series.slices.template.setAll({cornerRadius:5});series.ticks.template.setAll({forceHidden:true});// Set data\n// https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Setting_data\nseries.data.setAll([{value:10,category:\"One\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))},{value:9,category:\"Two\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))},{value:6,category:\"Three\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-danger\"))},{value:5,category:\"Four\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-warning\"))},{value:4,category:\"Five\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-info\"))},{value:3,category:\"Six\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-secondary\"))}]);series.appear(1000,100);});};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget17;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget17.init();});\"use strict\";// Class definition\nvar KTChartsWidget18=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_18_chart\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-900\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var options={series:[{name:\"Spent time\",data:[54,42,75,110,23,87,50]}],chart:{fontFamily:\"inherit\",type:\"bar\",height:height,toolbar:{show:false}},plotOptions:{bar:{horizontal:false,columnWidth:[\"28%\"],borderRadius:5,dataLabels:{position:\"top\"// top, center, bottom\n},startingShape:\"flat\"}},legend:{show:false},dataLabels:{enabled:true,offsetY:-28,style:{fontSize:\"13px\",colors:[labelColor]},formatter:function formatter(val){return val;// + \"H\";\n}},stroke:{show:true,width:2,colors:[\"transparent\"]},xaxis:{categories:[\"QA Analysis\",\"Marketing\",\"Web Dev\",\"Maths\",\"Front-end Dev\",\"Physics\",\"Phylosophy\"],axisBorder:{show:false},axisTicks:{show:false},labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-500\"),fontSize:\"13px\"}},crosshairs:{fill:{gradient:{opacityFrom:0,opacityTo:0}}}},yaxis:{labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-500\"),fontSize:\"13px\"},formatter:function formatter(val){return val+\"H\";}}},fill:{opacity:1},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return+val+\" hours\";}}},colors:[KTUtil.getCssVariableValue(\"--bs-primary\"),KTUtil.getCssVariableValue(\"--bs-light-primary\")],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget18;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget18.init();});\"use strict\";// Class definition\nvar KTChartsWidget19=function(){// Private methods\nvar initChart1=function initChart1(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_19_chart_1\");if(!element){return;}am5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/radar-chart/\nvar chart=root.container.children.push(am5radar.RadarChart[\"new\"](root,{panX:false,panY:false,wheelX:\"panX\",wheelY:\"zoomX\",innerRadius:am5.percent(20),startAngle:-90,endAngle:180}));// Data\nvar data=[{category:\"Research\",value:80,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-info\"))}},{category:\"Marketing\",value:35,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-danger\"))}},{category:\"Distribution\",value:92,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{category:\"Human Resources\",value:68,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))}}];// Add cursor\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Cursor\nvar cursor=chart.set(\"cursor\",am5radar.RadarCursor[\"new\"](root,{behavior:\"zoomX\"}));cursor.lineY.set(\"visible\",false);// Create axes and their renderers\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_axes\nvar xRenderer=am5radar.AxisRendererCircular[\"new\"](root,{//minGridDistance: 50\n});xRenderer.labels.template.setAll({radius:10});xRenderer.grid.template.setAll({forceHidden:true});var xAxis=chart.xAxes.push(am5xy.ValueAxis[\"new\"](root,{renderer:xRenderer,min:0,max:100,strictMinMax:true,numberFormat:\"#'%'\",tooltip:am5.Tooltip[\"new\"](root,{})}));var yRenderer=am5radar.AxisRendererRadial[\"new\"](root,{minGridDistance:20});yRenderer.labels.template.setAll({centerX:am5.p100,fontWeight:\"500\",fontSize:18,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\")),templateField:\"columnSettings\"});yRenderer.grid.template.setAll({forceHidden:true});var yAxis=chart.yAxes.push(am5xy.CategoryAxis[\"new\"](root,{categoryField:\"category\",renderer:yRenderer}));yAxis.data.setAll(data);// Create series\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_series\nvar series1=chart.series.push(am5radar.RadarColumnSeries[\"new\"](root,{xAxis:xAxis,yAxis:yAxis,clustered:false,valueXField:\"full\",categoryYField:\"category\",fill:root.interfaceColors.get(\"alternativeBackground\")}));series1.columns.template.setAll({width:am5.p100,fillOpacity:0.08,strokeOpacity:0,cornerRadius:20});series1.data.setAll(data);var series2=chart.series.push(am5radar.RadarColumnSeries[\"new\"](root,{xAxis:xAxis,yAxis:yAxis,clustered:false,valueXField:\"value\",categoryYField:\"category\"}));series2.columns.template.setAll({width:am5.p100,strokeOpacity:0,tooltipText:\"{category}: {valueX}%\",cornerRadius:20,templateField:\"columnSettings\"});series2.data.setAll(data);// Animate chart and series in\n// https://www.amcharts.com/docs/v5/concepts/animations/#Initial_animation\nseries1.appear(1000);series2.appear(1000);chart.appear(1000,100);});};var initChart2=function initChart2(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_19_chart_2\");if(!element){return;}am5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/radar-chart/\nvar chart=root.container.children.push(am5radar.RadarChart[\"new\"](root,{panX:false,panY:false,wheelX:\"panX\",wheelY:\"zoomX\",innerRadius:am5.percent(20),startAngle:-90,endAngle:180}));// Data\nvar data=[{category:\"Research\",value:40,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-info\"))}},{category:\"Marketing\",value:50,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-danger\"))}},{category:\"Distribution\",value:80,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{category:\"Human Resources\",value:70,full:100,columnSettings:{fillOpacity:1,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))}}];// Add cursor\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Cursor\nvar cursor=chart.set(\"cursor\",am5radar.RadarCursor[\"new\"](root,{behavior:\"zoomX\"}));cursor.lineY.set(\"visible\",false);// Create axes and their renderers\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_axes\nvar xRenderer=am5radar.AxisRendererCircular[\"new\"](root,{//minGridDistance: 50\n});xRenderer.labels.template.setAll({radius:10});xRenderer.grid.template.setAll({forceHidden:true});var xAxis=chart.xAxes.push(am5xy.ValueAxis[\"new\"](root,{renderer:xRenderer,min:0,max:100,strictMinMax:true,numberFormat:\"#'%'\",tooltip:am5.Tooltip[\"new\"](root,{})}));var yRenderer=am5radar.AxisRendererRadial[\"new\"](root,{minGridDistance:20});yRenderer.labels.template.setAll({centerX:am5.p100,fontWeight:\"500\",fontSize:18,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\")),templateField:\"columnSettings\"});yRenderer.grid.template.setAll({forceHidden:true});var yAxis=chart.yAxes.push(am5xy.CategoryAxis[\"new\"](root,{categoryField:\"category\",renderer:yRenderer}));yAxis.data.setAll(data);// Create series\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_series\nvar series1=chart.series.push(am5radar.RadarColumnSeries[\"new\"](root,{xAxis:xAxis,yAxis:yAxis,clustered:false,valueXField:\"full\",categoryYField:\"category\",fill:root.interfaceColors.get(\"alternativeBackground\")}));series1.columns.template.setAll({width:am5.p100,fillOpacity:0.08,strokeOpacity:0,cornerRadius:20});series1.data.setAll(data);var series2=chart.series.push(am5radar.RadarColumnSeries[\"new\"](root,{xAxis:xAxis,yAxis:yAxis,clustered:false,valueXField:\"value\",categoryYField:\"category\"}));series2.columns.template.setAll({width:am5.p100,strokeOpacity:0,tooltipText:\"{category}: {valueX}%\",cornerRadius:20,templateField:\"columnSettings\"});series2.data.setAll(data);// Animate chart and series in\n// https://www.amcharts.com/docs/v5/concepts/animations/#Initial_animation\nseries1.appear(1000);series2.appear(1000);chart.appear(1000,100);});};// Public methods\nreturn{init:function init(){initChart1();initChart2();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget19;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget19.init();});\"use strict\";// Class definition\nvar KTChartsWidget2=function(){// Private methods\nvar initChart=function initChart(){var element=document.querySelectorAll(\".charts-widget-2\");[].slice.call(element).map(function(element){var height=parseInt(KTUtil.css(element,\"height\"));if(!element){return;}var color=element.getAttribute(\"data-kt-chart-color\");var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-800\");var strokeColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-\"+color);var lightColor=KTUtil.getCssVariableValue(\"--bs-light-\"+color);var options={series:[{name:\"Overview\",data:[15,15,45,45,25,25,55,55,20,20,37]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false},zoom:{enabled:false},sparkline:{enabled:true}},plotOptions:{},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"solid\",opacity:1},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:[\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],axisBorder:{show:false},axisTicks:{show:false},labels:{show:false,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{show:false,position:\"front\",stroke:{color:strokeColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{min:0,max:60,labels:{show:false,style:{colors:labelColor,fontSize:\"12px\"}}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return val;}}},colors:[lightColor],markers:{colors:[lightColor],strokeColor:[baseColor],strokeWidth:3}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);});};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget2;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget2.init();});\"use strict\";// Class definition\nvar KTChartsWidget20=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_20\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-danger\");var lightColor=KTUtil.getCssVariableValue(\"--bs-danger\");var chartInfo=element.getAttribute(\"data-kt-chart-info\");var options={series:[{name:chartInfo,data:[34.5,34.5,35,35,35.5,35.5,35,35,35.5,35.5,35,35,34.5,34.5,35,35,35.4,35.4,35]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},plotOptions:{},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"gradient\",gradient:{shadeIntensity:1,opacityFrom:0.4,opacityTo:0,stops:[0,80,100]}},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:[\"\",\"Apr 02\",\"Apr 03\",\"Apr 04\",\"Apr 05\",\"Apr 06\",\"Apr 07\",\"Apr 08\",\"Apr 09\",\"Apr 10\",\"Apr 11\",\"Apr 12\",\"Apr 13\",\"Apr 14\",\"Apr 17\",\"Apr 18\",\"Apr 19\",\"Apr 21\",\"\"],axisBorder:{show:false},axisTicks:{show:false},tickAmount:6,labels:{rotate:0,rotateAlways:true,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{max:36.3,min:33,tickAmount:6,labels:{style:{colors:labelColor,fontSize:\"12px\"},formatter:function formatter(val){return\"$\"+parseInt(10*val);}}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return\"$\"+parseInt(10*val);}}},colors:[lightColor],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:3}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget20;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget20.init();});\"use strict\";// Class definition\nvar KTChartsWidget21=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_21\");if(!element){return;}var options={type:\"serial\",theme:\"light\",legend:{equalWidths:false,useGraphSettings:true,valueAlign:\"left\",valueWidth:120},dataProvider:[{date:\"2012-01-01\",distance:227,townName:\"New York\",townName2:\"New York\",townSize:25,latitude:40.71,duration:408},{date:\"2012-01-02\",distance:371,townName:\"Washington\",townSize:14,latitude:38.89,duration:482},{date:\"2012-01-03\",distance:433,townName:\"Wilmington\",townSize:6,latitude:34.22,duration:562},{date:\"2012-01-04\",distance:345,townName:\"Jacksonville\",townSize:7,latitude:30.35,duration:379},{date:\"2012-01-05\",distance:480,townName:\"Miami\",townName2:\"Miami\",townSize:10,latitude:25.83,duration:501},{date:\"2012-01-06\",distance:386,townName:\"Tallahassee\",townSize:7,latitude:30.46,duration:443},{date:\"2012-01-07\",distance:348,townName:\"New Orleans\",townSize:10,latitude:29.94,duration:405},{date:\"2012-01-08\",distance:238,townName:\"Houston\",townName2:\"Houston\",townSize:16,latitude:29.76,duration:309},{date:\"2012-01-09\",distance:218,townName:\"Dalas\",townSize:17,latitude:32.8,duration:287},{date:\"2012-01-10\",distance:349,townName:\"Oklahoma City\",townSize:11,latitude:35.49,duration:485},{date:\"2012-01-11\",distance:603,townName:\"Kansas City\",townSize:10,latitude:39.1,duration:890},{date:\"2012-01-12\",distance:534,townName:\"Denver\",townName2:\"Denver\",townSize:18,latitude:39.74,duration:810},{date:\"2012-01-13\",townName:\"Salt Lake City\",townSize:12,distance:425,duration:670,latitude:40.75,dashLength:8,alpha:0.4},{date:\"2012-01-14\",latitude:36.1,duration:470,townName:\"Las Vegas\",townName2:\"Las Vegas\"},{date:\"2012-01-15\"},{date:\"2012-01-16\"},{date:\"2012-01-17\"},{date:\"2012-01-18\"},{date:\"2012-01-19\"}],valueAxes:[{id:\"distanceAxis\",axisAlpha:0,gridAlpha:0,position:\"left\",title:\"distance\"},{id:\"latitudeAxis\",axisAlpha:0,gridAlpha:0,labelsEnabled:false,position:\"right\"},{id:\"durationAxis\",duration:\"mm\",durationUnits:{hh:\"h \",mm:\"min\"},axisAlpha:0,gridAlpha:0,inside:true,position:\"right\",title:\"duration\"}],graphs:[{alphaField:\"alpha\",balloonText:\"[[value]] miles\",dashLengthField:\"dashLength\",fillAlphas:0.7,legendPeriodValueText:\"total: [[value.sum]] mi\",legendValueText:\"[[value]] mi\",title:\"distance\",type:\"column\",valueField:\"distance\",valueAxis:\"distanceAxis\"},{balloonText:\"latitude:[[value]]\",bullet:\"round\",bulletBorderAlpha:1,useLineColorForBulletBorder:true,bulletColor:\"#FFFFFF\",bulletSizeField:\"townSize\",dashLengthField:\"dashLength\",descriptionField:\"townName\",labelPosition:\"right\",labelText:\"[[townName2]]\",legendValueText:\"[[value]]/[[description]]\",title:\"latitude/city\",fillAlphas:0,valueField:\"latitude\",valueAxis:\"latitudeAxis\"},{bullet:\"square\",bulletBorderAlpha:1,bulletBorderThickness:1,dashLengthField:\"dashLength\",legendValueText:\"[[value]]\",title:\"duration\",fillAlphas:0,valueField:\"duration\",valueAxis:\"durationAxis\"}],chartCursor:{categoryBalloonDateFormat:\"DD\",cursorAlpha:0.1,cursorColor:\"#000000\",fullWidth:true,valueBalloonsEnabled:false,zoomable:false},dataDateFormat:\"YYYY-MM-DD\",categoryField:\"date\",categoryAxis:{dateFormats:[{period:\"DD\",format:\"DD\"},{period:\"WW\",format:\"MMM DD\"},{period:\"MM\",format:\"MMM\"},{period:\"YYYY\",format:\"YYYY\"}],parseDates:true,autoGridCount:false,axisColor:\"#555555\",gridAlpha:0.1,gridColor:\"#FFFFFF\",gridCount:50},\"export\":{enabled:true}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget21;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget21.init();});\"use strict\";// Class definition\nvar KTChartsWidget22=function(){// Private methods\nvar initChart=function initChart(tabSelector,chartSelector,data,initByDefault){var element=document.querySelector(chartSelector);if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var options={series:data,chart:{fontFamily:\"inherit\",type:\"donut\",width:250},plotOptions:{pie:{donut:{size:\"50%\",labels:{value:{fontSize:\"10px\"}}}}},colors:[KTUtil.getCssVariableValue(\"--bs-info\"),KTUtil.getCssVariableValue(\"--bs-success\"),KTUtil.getCssVariableValue(\"--bs-primary\"),KTUtil.getCssVariableValue(\"--bs-danger\")],stroke:{width:0},labels:[\"Sales\",\"Sales\",\"Sales\",\"Sales\"],legend:{show:false},fill:{type:\"false\"}};var chart=new ApexCharts(element,options);var init=false;var tab=document.querySelector(tabSelector);if(initByDefault===true){chart.render();init=true;}tab.addEventListener(\"shown.bs.tab\",function(event){if(init==false){chart.render();init=true;}});};// Public methods\nreturn{init:function init(){initChart(\"#kt_chart_widgets_22_tab_1\",\"#kt_chart_widgets_22_chart_1\",[20,100,15,25],true);initChart(\"#kt_chart_widgets_22_tab_2\",\"#kt_chart_widgets_22_chart_2\",[70,13,11,2],false);}};}();// Webpack support\nif(true){module.exports=KTChartsWidget22;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget22.init();});// Class definition\nvar KTChartsWidget23=function(){// Private methods\nvar initChart=function initChart(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_23\");if(!element){return;}am5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/xy-chart/\nvar chart=root.container.children.push(am5xy.XYChart[\"new\"](root,{panX:false,panY:false,layout:root.verticalLayout}));var data=[{year:\"2016\",income:23.5,expenses:21.1,columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{year:\"2017\",income:26.2,expenses:30.5,columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{year:\"2018\",income:30.1,expenses:34.9,columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{year:\"2019\",income:29.5,expenses:31.1,columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{year:\"2020\",income:30.6,expenses:28.2,strokeSettings:{strokeWidth:3,strokeDasharray:[5,5]},columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{year:\"2021\",income:40.6,expenses:28.2,strokeSettings:{strokeWidth:3,strokeDasharray:[5,5]},columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}},{year:\"2022\",income:34.1,expenses:32.9,strokeSettings:{strokeWidth:3,strokeDasharray:[5,5]},columnSettings:{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}}];// Create axes\n// https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\nvar xAxis=chart.xAxes.push(am5xy.CategoryAxis[\"new\"](root,{categoryField:\"year\",renderer:am5xy.AxisRendererX[\"new\"](root,{})//tooltip: am5.Tooltip.new(root, {}),\n}));xAxis.data.setAll(data);xAxis.get(\"renderer\").labels.template.setAll({paddingTop:20,fontWeight:\"400\",fontSize:11,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});xAxis.get(\"renderer\").grid.template.setAll({disabled:true,strokeOpacity:0});var yAxis=chart.yAxes.push(am5xy.ValueAxis[\"new\"](root,{min:0,extraMax:0.1,renderer:am5xy.AxisRendererY[\"new\"](root,{})}));yAxis.get(\"renderer\").labels.template.setAll({paddingTop:0,fontWeight:\"400\",fontSize:11,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});yAxis.get(\"renderer\").grid.template.setAll({stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-300\")),strokeWidth:1,strokeOpacity:1,strokeDasharray:[3]});// Add series\n// https://www.amcharts.com/docs/v5/charts/xy-chart/series/\nvar series1=chart.series.push(am5xy.ColumnSeries[\"new\"](root,{name:\"Income\",xAxis:xAxis,yAxis:yAxis,valueYField:\"income\",categoryXField:\"year\",tooltip:am5.Tooltip[\"new\"](root,{pointerOrientation:\"horizontal\",labelText:\"{name} in {categoryX}: {valueY} {info}\"})}));series1.columns.template.setAll({tooltipY:am5.percent(10),templateField:\"columnSettings\"});series1.data.setAll(data);var series2=chart.series.push(am5xy.LineSeries[\"new\"](root,{name:\"Expenses\",xAxis:xAxis,yAxis:yAxis,valueYField:\"expenses\",categoryXField:\"year\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\")),stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-success\")),tooltip:am5.Tooltip[\"new\"](root,{pointerOrientation:\"horizontal\",labelText:\"{name} in {categoryX}: {valueY} {info}\"})}));series2.strokes.template.setAll({stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))});series2.strokes.template.setAll({strokeWidth:3,templateField:\"strokeSettings\"});series2.data.setAll(data);series2.bullets.push(function(){return am5.Bullet[\"new\"](root,{sprite:am5.Circle[\"new\"](root,{strokeWidth:3,stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-success\")),radius:5,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-light-success\"))})});});series1.columns.template.setAll({strokeOpacity:0,cornerRadiusBR:0,cornerRadiusTR:6,cornerRadiusBL:0,cornerRadiusTL:6});chart.set(\"cursor\",am5xy.XYCursor[\"new\"](root,{}));chart.get(\"cursor\").lineX.setAll({visible:false});chart.get(\"cursor\").lineY.setAll({visible:false});// Add legend\n// https://www.amcharts.com/docs/v5/charts/xy-chart/legend-xy-series/\nvar legend=chart.children.push(am5.Legend[\"new\"](root,{centerX:am5.p50,x:am5.p50}));legend.data.setAll(chart.series.values);// Make stuff animate on load\n// https://www.amcharts.com/docs/v5/concepts/animations/\nchart.appear(1000,100);series1.appear();});// end am5.ready()\n};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget23;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget23.init();});// Class definition\nvar KTChartsWidget24=function(){// Private methods\nvar initChart=function initChart(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_24\");if(!element){return;}// On amchart ready\nam5.ready(function(){var usData=[{age:\"0 to 5\",male:10175713,female:9736305},{age:\"5 to 9\",male:10470147,female:10031835},{age:\"10 to 14\",male:10561873,female:10117913},{age:\"15 to 17\",male:6447043,female:6142996},{age:\"18 to 21\",male:9349745,female:8874664},{age:\"22 to 24\",male:6722248,female:6422017},{age:\"25 to 29\",male:10989596,female:10708414},{age:\"30 to 34\",male:10625791,female:10557848},{age:\"35 to 39\",male:9899569,female:9956213},{age:\"40 to 44\",male:10330986,female:10465142},{age:\"45 to 49\",male:10571984,female:10798384},{age:\"50 to 54\",male:11051409,female:11474081},{age:\"55 to 59\",male:10173646,female:10828301},{age:\"60 to 64\",male:8824852,female:9590829},{age:\"65 to 69\",male:6876271,female:7671175},{age:\"70 to 74\",male:4867513,female:5720208},{age:\"75 to 79\",male:3416432,female:4313697},{age:\"80 to 84\",male:2378691,female:3432738},{age:\"85 and Older\",male:2000771,female:3937981}];var stateData={AK:[{age:\"0 to 5\",male:28346,female:26607},{age:\"10 to 14\",male:26350,female:24821},{age:\"15 to 17\",male:15929,female:14735},{age:\"18 to 21\",male:25360,female:19030},{age:\"22 to 24\",male:20755,female:15663},{age:\"25 to 29\",male:32415,female:28259},{age:\"30 to 34\",male:28232,female:25272},{age:\"35 to 39\",male:24217,female:22002},{age:\"40 to 44\",male:23429,female:21968},{age:\"45 to 49\",male:24764,female:22784},{age:\"5 to 9\",male:26276,female:25063},{age:\"50 to 54\",male:27623,female:25503},{age:\"55 to 59\",male:26300,female:25198},{age:\"60 to 64\",male:21798,female:18970},{age:\"65 to 69\",male:13758,female:12899},{age:\"70 to 74\",male:8877,female:8269},{age:\"75 to 79\",male:4834,female:4894},{age:\"80 to 84\",male:3015,female:3758},{age:\"85 and Older\",male:1882,female:3520}],AL:[{age:\"0 to 5\",male:150860,female:144194},{age:\"10 to 14\",male:161596,female:156841},{age:\"15 to 17\",male:98307,female:94462},{age:\"18 to 21\",male:142173,female:136514},{age:\"22 to 24\",male:99164,female:101444},{age:\"25 to 29\",male:154977,female:159815},{age:\"30 to 34\",male:150036,female:156764},{age:\"35 to 39\",male:141667,female:152220},{age:\"40 to 44\",male:155693,female:159835},{age:\"45 to 49\",male:156413,female:163909},{age:\"5 to 9\",male:156380,female:149334},{age:\"50 to 54\",male:166863,female:178187},{age:\"55 to 59\",male:156994,female:169355},{age:\"60 to 64\",male:140659,female:156638},{age:\"65 to 69\",male:112724,female:128494},{age:\"70 to 74\",male:79258,female:96507},{age:\"75 to 79\",male:55122,female:75371},{age:\"80 to 84\",male:36252,female:53976},{age:\"85 and Older\",male:25955,female:55667}],AR:[{age:\"0 to 5\",male:98246,female:93534},{age:\"10 to 14\",male:99707,female:96862},{age:\"15 to 17\",male:60521,female:57735},{age:\"18 to 21\",male:87209,female:81936},{age:\"22 to 24\",male:59114,female:59387},{age:\"25 to 29\",male:96190,female:96573},{age:\"30 to 34\",male:96273,female:95632},{age:\"35 to 39\",male:90371,female:90620},{age:\"40 to 44\",male:91881,female:93777},{age:\"45 to 49\",male:93238,female:95476},{age:\"5 to 9\",male:103613,female:97603},{age:\"50 to 54\",male:98960,female:102953},{age:\"55 to 59\",male:92133,female:100676},{age:\"60 to 64\",male:84082,female:90243},{age:\"65 to 69\",male:70121,female:76669},{age:\"70 to 74\",male:52154,female:61686},{age:\"75 to 79\",male:36856,female:44371},{age:\"80 to 84\",male:23098,female:35328},{age:\"85 and Older\",male:18146,female:35234}],AZ:[{age:\"0 to 5\",male:221511,female:212324},{age:\"10 to 14\",male:233530,female:222965},{age:\"15 to 17\",male:138926,female:132399},{age:\"18 to 21\",male:200240,female:187786},{age:\"22 to 24\",male:142852,female:132457},{age:\"25 to 29\",male:231488,female:215985},{age:\"30 to 34\",male:223754,female:214946},{age:\"35 to 39\",male:206718,female:202482},{age:\"40 to 44\",male:213591,female:210621},{age:\"45 to 49\",male:205830,female:206081},{age:\"5 to 9\",male:231249,female:224385},{age:\"50 to 54\",male:210386,female:218328},{age:\"55 to 59\",male:192614,female:209767},{age:\"60 to 64\",male:178325,female:200313},{age:\"65 to 69\",male:155852,female:174407},{age:\"70 to 74\",male:121878,female:136840},{age:\"75 to 79\",male:87470,female:96953},{age:\"80 to 84\",male:58553,female:69559},{age:\"85 and Older\",male:44321,female:74242}],CA:[{age:\"0 to 5\",male:1283763,female:1228013},{age:\"10 to 14\",male:1297819,female:1245016},{age:\"15 to 17\",male:811114,female:773387},{age:\"18 to 21\",male:1179739,female:1100368},{age:\"22 to 24\",male:883323,female:825833},{age:\"25 to 29\",male:1478557,female:1387516},{age:\"30 to 34\",male:1399835,female:1348430},{age:\"35 to 39\",male:1287803,female:1271908},{age:\"40 to 44\",male:1308311,female:1309907},{age:\"45 to 49\",male:1306719,female:1303528},{age:\"5 to 9\",male:1295030,female:1240201},{age:\"50 to 54\",male:1305323,female:1330645},{age:\"55 to 59\",male:1161821,female:1223440},{age:\"60 to 64\",male:975874,female:1060921},{age:\"65 to 69\",male:734814,female:833926},{age:\"70 to 74\",male:515115,female:604615},{age:\"75 to 79\",male:363282,female:455568},{age:\"80 to 84\",male:264126,female:363937},{age:\"85 and Older\",male:234767,female:427170}],CO:[{age:\"0 to 5\",male:173245,female:163629},{age:\"10 to 14\",male:179579,female:170930},{age:\"15 to 17\",male:102577,female:98569},{age:\"18 to 21\",male:152713,female:139268},{age:\"22 to 24\",male:116654,female:108238},{age:\"25 to 29\",male:204625,female:188680},{age:\"30 to 34\",male:200624,female:188616},{age:\"35 to 39\",male:183386,female:175326},{age:\"40 to 44\",male:184422,female:173654},{age:\"45 to 49\",male:174730,female:172981},{age:\"5 to 9\",male:179803,female:173524},{age:\"50 to 54\",male:183543,female:187757},{age:\"55 to 59\",male:170717,female:179537},{age:\"60 to 64\",male:150815,female:155924},{age:\"65 to 69\",male:111094,female:119530},{age:\"70 to 74\",male:72252,female:80168},{age:\"75 to 79\",male:49142,female:59393},{age:\"80 to 84\",male:31894,female:43881},{age:\"85 and Older\",male:26852,female:50634}],CT:[{age:\"0 to 5\",male:97647,female:93798},{age:\"10 to 14\",male:118032,female:113043},{age:\"15 to 17\",male:75546,female:71687},{age:\"18 to 21\",male:106966,female:102763},{age:\"22 to 24\",male:71125,female:64777},{age:\"25 to 29\",male:112189,female:108170},{age:\"30 to 34\",male:107223,female:109096},{age:\"35 to 39\",male:102424,female:106008},{age:\"40 to 44\",male:116664,female:123744},{age:\"45 to 49\",male:131872,female:139406},{age:\"5 to 9\",male:110043,female:104940},{age:\"50 to 54\",male:138644,female:146532},{age:\"55 to 59\",male:126670,female:132895},{age:\"60 to 64\",male:104701,female:114339},{age:\"65 to 69\",male:80178,female:91052},{age:\"70 to 74\",male:55237,female:65488},{age:\"75 to 79\",male:38844,female:51544},{age:\"80 to 84\",male:28908,female:43036},{age:\"85 and Older\",male:28694,female:59297}],DC:[{age:\"0 to 5\",male:20585,female:19848},{age:\"10 to 14\",male:12723,female:11991},{age:\"15 to 17\",male:7740,female:7901},{age:\"18 to 21\",male:22350,female:25467},{age:\"22 to 24\",male:15325,female:19085},{age:\"25 to 29\",male:35295,female:41913},{age:\"30 to 34\",male:32716,female:35553},{age:\"35 to 39\",male:23748,female:24922},{age:\"40 to 44\",male:21158,female:20113},{age:\"45 to 49\",male:19279,female:18956},{age:\"5 to 9\",male:14999,female:15518},{age:\"50 to 54\",male:19249,female:19279},{age:\"55 to 59\",male:17592,female:18716},{age:\"60 to 64\",male:14272,female:17892},{age:\"65 to 69\",male:9740,female:13375},{age:\"70 to 74\",male:8221,female:9761},{age:\"75 to 79\",male:5071,female:7601},{age:\"80 to 84\",male:3399,female:5619},{age:\"85 and Older\",male:3212,female:7300}],DE:[{age:\"0 to 5\",male:28382,female:27430},{age:\"10 to 14\",male:29482,female:27484},{age:\"15 to 17\",male:17589,female:16828},{age:\"18 to 21\",male:26852,female:26911},{age:\"22 to 24\",male:19006,female:18413},{age:\"25 to 29\",male:30933,female:31146},{age:\"30 to 34\",male:28602,female:29431},{age:\"35 to 39\",male:26498,female:28738},{age:\"40 to 44\",male:27674,female:28519},{age:\"45 to 49\",male:30582,female:32924},{age:\"5 to 9\",male:28224,female:28735},{age:\"50 to 54\",male:32444,female:35052},{age:\"55 to 59\",male:29048,female:34377},{age:\"60 to 64\",male:27925,female:30017},{age:\"65 to 69\",male:22767,female:26707},{age:\"70 to 74\",male:17121,female:19327},{age:\"75 to 79\",male:11479,female:14264},{age:\"80 to 84\",male:7473,female:10353},{age:\"85 and Older\",male:6332,female:11385}],FL:[{age:\"0 to 5\",male:552054,female:529003},{age:\"10 to 14\",male:582351,female:558377},{age:\"15 to 17\",male:363538,female:345048},{age:\"18 to 21\",male:528013,female:498162},{age:\"22 to 24\",male:385515,female:368754},{age:\"25 to 29\",male:641710,female:622134},{age:\"30 to 34\",male:602467,female:602634},{age:\"35 to 39\",male:579722,female:585089},{age:\"40 to 44\",male:623074,female:639410},{age:\"45 to 49\",male:659376,female:677305},{age:\"5 to 9\",male:567479,female:543273},{age:\"50 to 54\",male:687625,female:723103},{age:\"55 to 59\",male:626363,female:685728},{age:\"60 to 64\",male:566282,female:651192},{age:\"65 to 69\",male:517513,female:589377},{age:\"70 to 74\",male:407275,female:470688},{age:\"75 to 79\",male:305530,female:361107},{age:\"80 to 84\",male:219362,female:281016},{age:\"85 and Older\",male:184760,female:314363}],GA:[{age:\"0 to 5\",male:338979,female:326326},{age:\"10 to 14\",male:356404,female:351833},{age:\"15 to 17\",male:211908,female:203412},{age:\"18 to 21\",male:305617,female:289233},{age:\"22 to 24\",male:214032,female:206526},{age:\"25 to 29\",male:342885,female:343115},{age:\"30 to 34\",male:333159,female:348125},{age:\"35 to 39\",male:325121,female:345251},{age:\"40 to 44\",male:348120,female:363703},{age:\"45 to 49\",male:343559,female:358754},{age:\"5 to 9\",male:362147,female:340071},{age:\"50 to 54\",male:338424,female:359362},{age:\"55 to 59\",male:294734,female:325653},{age:\"60 to 64\",male:254497,female:285276},{age:\"65 to 69\",male:198714,female:226714},{age:\"70 to 74\",male:135107,female:164091},{age:\"75 to 79\",male:88135,female:115830},{age:\"80 to 84\",male:53792,female:84961},{age:\"85 and Older\",male:37997,female:85126}],HI:[{age:\"0 to 5\",male:46668,female:44389},{age:\"10 to 14\",male:42590,female:41289},{age:\"15 to 17\",male:24759,female:23961},{age:\"18 to 21\",male:39937,female:32348},{age:\"22 to 24\",male:35270,female:28495},{age:\"25 to 29\",male:58033,female:48700},{age:\"30 to 34\",male:51544,female:47286},{age:\"35 to 39\",male:44144,female:42208},{age:\"40 to 44\",male:45731,female:43404},{age:\"45 to 49\",male:44336,female:44134},{age:\"5 to 9\",male:44115,female:40426},{age:\"50 to 54\",male:46481,female:46908},{age:\"55 to 59\",male:45959,female:47379},{age:\"60 to 64\",male:42420,female:43735},{age:\"65 to 69\",male:34846,female:36670},{age:\"70 to 74\",male:22981,female:25496},{age:\"75 to 79\",male:15219,female:18755},{age:\"80 to 84\",male:11142,female:17952},{age:\"85 and Older\",male:13696,female:22893}],IA:[{age:\"0 to 5\",male:100400,female:96170},{age:\"10 to 14\",male:104674,female:98485},{age:\"15 to 17\",male:62452,female:59605},{age:\"18 to 21\",male:96966,female:91782},{age:\"22 to 24\",male:66307,female:62504},{age:\"25 to 29\",male:98079,female:93653},{age:\"30 to 34\",male:100924,female:97248},{age:\"35 to 39\",male:90980,female:89632},{age:\"40 to 44\",male:92961,female:90218},{age:\"45 to 49\",male:98877,female:96654},{age:\"5 to 9\",male:104279,female:100558},{age:\"50 to 54\",male:109267,female:110142},{age:\"55 to 59\",male:104021,female:106042},{age:\"60 to 64\",male:95379,female:95499},{age:\"65 to 69\",male:68276,female:73624},{age:\"70 to 74\",male:50414,female:56973},{age:\"75 to 79\",male:37867,female:48121},{age:\"80 to 84\",male:27523,female:39851},{age:\"85 and Older\",male:24949,female:52170}],ID:[{age:\"0 to 5\",male:58355,female:56478},{age:\"10 to 14\",male:62528,female:59881},{age:\"15 to 17\",male:36373,female:33687},{age:\"18 to 21\",male:45752,female:45590},{age:\"22 to 24\",male:34595,female:30216},{age:\"25 to 29\",male:53998,female:52077},{age:\"30 to 34\",male:54217,female:52091},{age:\"35 to 39\",male:51247,female:47801},{age:\"40 to 44\",male:49113,female:49853},{age:\"45 to 49\",male:48392,female:48288},{age:\"5 to 9\",male:63107,female:59237},{age:\"50 to 54\",male:51805,female:52984},{age:\"55 to 59\",male:49226,female:51868},{age:\"60 to 64\",male:47343,female:47631},{age:\"65 to 69\",male:38436,female:38133},{age:\"70 to 74\",male:26243,female:28577},{age:\"75 to 79\",male:18404,female:20325},{age:\"80 to 84\",male:11653,female:15313},{age:\"85 and Older\",male:9677,female:16053}],IL:[{age:\"0 to 5\",male:408295,female:392900},{age:\"10 to 14\",male:437688,female:419077},{age:\"15 to 17\",male:269202,female:257213},{age:\"18 to 21\",male:369219,female:353570},{age:\"22 to 24\",male:268501,female:258559},{age:\"25 to 29\",male:448001,female:442418},{age:\"30 to 34\",male:445416,female:445729},{age:\"35 to 39\",male:416265,female:418999},{age:\"40 to 44\",male:425825,female:427573},{age:\"45 to 49\",male:433177,female:441116},{age:\"5 to 9\",male:427121,female:412238},{age:\"50 to 54\",male:454039,female:470982},{age:\"55 to 59\",male:414948,female:442280},{age:\"60 to 64\",male:354782,female:380640},{age:\"65 to 69\",male:259363,female:292899},{age:\"70 to 74\",male:184622,female:223905},{age:\"75 to 79\",male:129016,female:171743},{age:\"80 to 84\",male:91973,female:139204},{age:\"85 and Older\",male:79446,female:165817}],IN:[{age:\"0 to 5\",male:215697,female:205242},{age:\"10 to 14\",male:229911,female:221563},{age:\"15 to 17\",male:139494,female:132879},{age:\"18 to 21\",male:198763,female:194206},{age:\"22 to 24\",male:140805,female:131947},{age:\"25 to 29\",male:210315,female:208593},{age:\"30 to 34\",male:211656,female:210103},{age:\"35 to 39\",male:201979,female:200693},{age:\"40 to 44\",male:212114,female:212653},{age:\"45 to 49\",male:216446,female:219033},{age:\"5 to 9\",male:226901,female:214964},{age:\"50 to 54\",male:232241,female:237844},{age:\"55 to 59\",male:217033,female:228674},{age:\"60 to 64\",male:186412,female:197353},{age:\"65 to 69\",male:140336,female:156256},{age:\"70 to 74\",male:99402,female:116834},{age:\"75 to 79\",male:68758,female:88794},{age:\"80 to 84\",male:47628,female:72061},{age:\"85 and Older\",male:39372,female:83690}],KS:[{age:\"0 to 5\",male:102716,female:98004},{age:\"10 to 14\",male:102335,female:99132},{age:\"15 to 17\",male:60870,female:57957},{age:\"18 to 21\",male:90593,female:83299},{age:\"22 to 24\",male:66512,female:59368},{age:\"25 to 29\",male:99384,female:93840},{age:\"30 to 34\",male:98020,female:94075},{age:\"35 to 39\",male:87763,female:85422},{age:\"40 to 44\",male:87647,female:84970},{age:\"45 to 49\",male:89233,female:88877},{age:\"5 to 9\",male:103861,female:98642},{age:\"50 to 54\",male:98398,female:101197},{age:\"55 to 59\",male:95861,female:96152},{age:\"60 to 64\",male:79440,female:85124},{age:\"65 to 69\",male:60035,female:64369},{age:\"70 to 74\",male:42434,female:49221},{age:\"75 to 79\",male:30967,female:39425},{age:\"80 to 84\",male:23026,female:33863},{age:\"85 and Older\",male:20767,female:40188}],KY:[{age:\"0 to 5\",male:142062,female:134389},{age:\"10 to 14\",male:147586,female:138629},{age:\"15 to 17\",male:87696,female:83139},{age:\"18 to 21\",male:128249,female:121099},{age:\"22 to 24\",male:90794,female:85930},{age:\"25 to 29\",male:140811,female:139855},{age:\"30 to 34\",male:142732,female:142551},{age:\"35 to 39\",male:137211,female:136524},{age:\"40 to 44\",male:145358,female:145251},{age:\"45 to 49\",male:148883,female:150922},{age:\"5 to 9\",male:143532,female:139032},{age:\"50 to 54\",male:156890,female:163054},{age:\"55 to 59\",male:147006,female:156302},{age:\"60 to 64\",male:129457,female:139434},{age:\"65 to 69\",male:100883,female:112696},{age:\"70 to 74\",male:71867,female:83665},{age:\"75 to 79\",male:47828,female:62775},{age:\"80 to 84\",male:31477,female:46386},{age:\"85 and Older\",male:23886,female:51512}],LA:[{age:\"0 to 5\",male:157642,female:152324},{age:\"10 to 14\",male:157781,female:149752},{age:\"15 to 17\",male:93357,female:90227},{age:\"18 to 21\",male:136496,female:131202},{age:\"22 to 24\",male:101438,female:101480},{age:\"25 to 29\",male:167414,female:168886},{age:\"30 to 34\",male:160094,female:161424},{age:\"35 to 39\",male:142182,female:141813},{age:\"40 to 44\",male:138717,female:144789},{age:\"45 to 49\",male:145906,female:152340},{age:\"5 to 9\",male:159193,female:154320},{age:\"50 to 54\",male:157743,female:167125},{age:\"55 to 59\",male:149001,female:161295},{age:\"60 to 64\",male:129265,female:139378},{age:\"65 to 69\",male:98404,female:106844},{age:\"70 to 74\",male:65845,female:83779},{age:\"75 to 79\",male:47365,female:60745},{age:\"80 to 84\",male:29452,female:48839},{age:\"85 and Older\",male:23861,female:47535}],MA:[{age:\"0 to 5\",male:187066,female:178775},{age:\"10 to 14\",male:205530,female:195312},{age:\"15 to 17\",male:129433,female:123212},{age:\"18 to 21\",male:207432,female:213820},{age:\"22 to 24\",male:140356,female:135839},{age:\"25 to 29\",male:235172,female:237653},{age:\"30 to 34\",male:216220,female:221692},{age:\"35 to 39\",male:196293,female:202730},{age:\"40 to 44\",male:218111,female:231277},{age:\"45 to 49\",male:237629,female:249926},{age:\"5 to 9\",male:191958,female:186343},{age:\"50 to 54\",male:247973,female:260886},{age:\"55 to 59\",male:227238,female:241029},{age:\"60 to 64\",male:189981,female:211282},{age:\"65 to 69\",male:146129,female:164268},{age:\"70 to 74\",male:100745,female:123577},{age:\"75 to 79\",male:70828,female:92141},{age:\"80 to 84\",male:52074,female:81603},{age:\"85 and Older\",male:49482,female:104571}],MD:[{age:\"0 to 5\",male:187617,female:180105},{age:\"10 to 14\",male:191787,female:185380},{age:\"15 to 17\",male:118027,female:113549},{age:\"18 to 21\",male:166991,female:159589},{age:\"22 to 24\",male:120617,female:116602},{age:\"25 to 29\",male:205555,female:206944},{age:\"30 to 34\",male:196824,female:203989},{age:\"35 to 39\",male:179340,female:193957},{age:\"40 to 44\",male:195388,female:205570},{age:\"45 to 49\",male:208382,female:225458},{age:\"5 to 9\",male:189781,female:182034},{age:\"50 to 54\",male:217574,female:235604},{age:\"55 to 59\",male:193789,female:210582},{age:\"60 to 64\",male:161828,female:186524},{age:\"65 to 69\",male:123204,female:144193},{age:\"70 to 74\",male:84114,female:101563},{age:\"75 to 79\",male:56755,female:75715},{age:\"80 to 84\",male:39615,female:59728},{age:\"85 and Older\",male:35455,female:70809}],ME:[{age:\"0 to 5\",male:33298,female:32108},{age:\"10 to 14\",male:38254,female:36846},{age:\"15 to 17\",male:24842,female:23688},{age:\"18 to 21\",male:35315,female:33777},{age:\"22 to 24\",male:23007,female:21971},{age:\"25 to 29\",male:37685,female:38353},{age:\"30 to 34\",male:36838,female:37697},{age:\"35 to 39\",male:35988,female:37686},{age:\"40 to 44\",male:42092,female:42912},{age:\"45 to 49\",male:47141,female:49161},{age:\"5 to 9\",male:38066,female:35151},{age:\"50 to 54\",male:53458,female:55451},{age:\"55 to 59\",male:51789,female:55407},{age:\"60 to 64\",male:47171,female:49840},{age:\"65 to 69\",male:37495,female:39678},{age:\"70 to 74\",male:26300,female:28932},{age:\"75 to 79\",male:18197,female:22047},{age:\"80 to 84\",male:12824,female:18302},{age:\"85 and Older\",male:10321,female:20012}],MI:[{age:\"0 to 5\",male:295157,female:280629},{age:\"10 to 14\",male:329983,female:319870},{age:\"15 to 17\",male:210017,female:199977},{age:\"18 to 21\",male:299937,female:287188},{age:\"22 to 24\",male:208270,female:202858},{age:\"25 to 29\",male:303606,female:298013},{age:\"30 to 34\",male:292780,female:296303},{age:\"35 to 39\",male:283925,female:288526},{age:\"40 to 44\",male:314544,female:319923},{age:\"45 to 49\",male:337524,female:344097},{age:\"5 to 9\",male:316345,female:297675},{age:\"50 to 54\",male:366054,female:378332},{age:\"55 to 59\",male:349590,female:369347},{age:\"60 to 64\",male:303421,female:323815},{age:\"65 to 69\",male:230810,female:252455},{age:\"70 to 74\",male:161676,female:186453},{age:\"75 to 79\",male:112555,female:141554},{age:\"80 to 84\",male:78669,female:116914},{age:\"85 and Older\",male:67110,female:134669}],MN:[{age:\"0 to 5\",male:178616,female:170645},{age:\"10 to 14\",male:180951,female:174374},{age:\"15 to 17\",male:110001,female:104197},{age:\"18 to 21\",male:148247,female:144611},{age:\"22 to 24\",male:108864,female:103755},{age:\"25 to 29\",male:185766,female:180698},{age:\"30 to 34\",male:189374,female:184845},{age:\"35 to 39\",male:166613,female:160534},{age:\"40 to 44\",male:172583,female:171011},{age:\"45 to 49\",male:184130,female:182785},{age:\"5 to 9\",male:185244,female:176674},{age:\"50 to 54\",male:202427,female:203327},{age:\"55 to 59\",male:187216,female:189980},{age:\"60 to 64\",male:157586,female:160588},{age:\"65 to 69\",male:114903,female:121985},{age:\"70 to 74\",male:81660,female:92401},{age:\"75 to 79\",male:57855,female:72839},{age:\"80 to 84\",male:42192,female:58545},{age:\"85 and Older\",male:37938,female:73211}],MO:[{age:\"0 to 5\",male:192851,female:183921},{age:\"10 to 14\",male:201273,female:190020},{age:\"15 to 17\",male:122944,female:116383},{age:\"18 to 21\",male:175782,female:169076},{age:\"22 to 24\",male:124584,female:123027},{age:\"25 to 29\",male:200511,female:200134},{age:\"30 to 34\",male:197781,female:198735},{age:\"35 to 39\",male:181485,female:180002},{age:\"40 to 44\",male:183318,female:188038},{age:\"45 to 49\",male:194538,female:199735},{age:\"5 to 9\",male:200091,female:193196},{age:\"50 to 54\",male:218663,female:225083},{age:\"55 to 59\",male:199513,female:216459},{age:\"60 to 64\",male:176036,female:187668},{age:\"65 to 69\",male:135605,female:150815},{age:\"70 to 74\",male:99845,female:117802},{age:\"75 to 79\",male:70734,female:88769},{age:\"80 to 84\",male:48118,female:72085},{age:\"85 and Older\",male:40331,female:80497}],MS:[{age:\"0 to 5\",male:100654,female:97079},{age:\"10 to 14\",male:107363,female:101958},{age:\"15 to 17\",male:62923,female:60591},{age:\"18 to 21\",male:94460,female:94304},{age:\"22 to 24\",male:63870,female:58909},{age:\"25 to 29\",male:96027,female:98023},{age:\"30 to 34\",male:95533,female:98837},{age:\"35 to 39\",male:88278,female:92876},{age:\"40 to 44\",male:93579,female:97851},{age:\"45 to 49\",male:92103,female:98871},{age:\"5 to 9\",male:104911,female:100694},{age:\"50 to 54\",male:98578,female:106516},{age:\"55 to 59\",male:94835,female:101616},{age:\"60 to 64\",male:80677,female:91332},{age:\"65 to 69\",male:64386,female:72940},{age:\"70 to 74\",male:46712,female:56013},{age:\"75 to 79\",male:32079,female:42598},{age:\"80 to 84\",male:19966,female:32724},{age:\"85 and Older\",male:14789,female:32626}],MT:[{age:\"0 to 5\",male:31021,female:29676},{age:\"10 to 14\",male:30960,female:29710},{age:\"15 to 17\",male:19558,female:18061},{age:\"18 to 21\",male:30975,female:27314},{age:\"22 to 24\",male:21419,female:20153},{age:\"25 to 29\",male:32300,female:30805},{age:\"30 to 34\",male:33167,female:30964},{age:\"35 to 39\",male:29772,female:28999},{age:\"40 to 44\",male:28538,female:27311},{age:\"45 to 49\",male:30820,female:30608},{age:\"5 to 9\",male:33641,female:31763},{age:\"50 to 54\",male:36761,female:37476},{age:\"55 to 59\",male:38291,female:40028},{age:\"60 to 64\",male:35306,female:35021},{age:\"65 to 69\",male:27786,female:27047},{age:\"70 to 74\",male:19708,female:19938},{age:\"75 to 79\",male:13344,female:14751},{age:\"80 to 84\",male:9435,female:11392},{age:\"85 and Older\",male:7361,female:13519}],NC:[{age:\"0 to 5\",male:311288,female:299882},{age:\"10 to 14\",male:333622,female:316123},{age:\"15 to 17\",male:194507,female:185872},{age:\"18 to 21\",male:299506,female:275504},{age:\"22 to 24\",male:207910,female:196277},{age:\"25 to 29\",male:317709,female:324593},{age:\"30 to 34\",male:311582,female:323483},{age:\"35 to 39\",male:308195,female:319405},{age:\"40 to 44\",male:334818,female:349484},{age:\"45 to 49\",male:331086,female:345940},{age:\"5 to 9\",male:325977,female:316564},{age:\"50 to 54\",male:334674,female:355791},{age:\"55 to 59\",male:308840,female:341170},{age:\"60 to 64\",male:270508,female:303831},{age:\"65 to 69\",male:225997,female:254521},{age:\"70 to 74\",male:154010,female:186677},{age:\"75 to 79\",male:106165,female:139937},{age:\"80 to 84\",male:68871,female:104839},{age:\"85 and Older\",male:50143,female:110032}],ND:[{age:\"0 to 5\",male:24524,female:24340},{age:\"10 to 14\",male:20939,female:20728},{age:\"15 to 17\",male:13197,female:12227},{age:\"18 to 21\",male:27439,female:22447},{age:\"22 to 24\",male:21413,female:19299},{age:\"25 to 29\",male:29543,female:24602},{age:\"30 to 34\",male:26425,female:22798},{age:\"35 to 39\",male:21846,female:19046},{age:\"40 to 44\",male:20123,female:19010},{age:\"45 to 49\",male:21386,female:20572},{age:\"5 to 9\",male:24336,female:22721},{age:\"50 to 54\",male:25126,female:24631},{age:\"55 to 59\",male:24412,female:24022},{age:\"60 to 64\",male:21598,female:20250},{age:\"65 to 69\",male:14868,female:14633},{age:\"70 to 74\",male:10729,female:11878},{age:\"75 to 79\",male:8086,female:9626},{age:\"80 to 84\",male:6222,female:9241},{age:\"85 and Older\",male:5751,female:11606}],NE:[{age:\"0 to 5\",male:67062,female:62974},{age:\"10 to 14\",male:64843,female:62695},{age:\"15 to 17\",male:38679,female:36116},{age:\"18 to 21\",male:56143,female:54195},{age:\"22 to 24\",male:40531,female:38139},{age:\"25 to 29\",male:64277,female:61028},{age:\"30 to 34\",male:64230,female:62423},{age:\"35 to 39\",male:57741,female:55950},{age:\"40 to 44\",male:56139,female:54518},{age:\"45 to 49\",male:57526,female:57077},{age:\"5 to 9\",male:68079,female:64509},{age:\"50 to 54\",male:64444,female:65106},{age:\"55 to 59\",male:61285,female:62057},{age:\"60 to 64\",male:52560,female:54977},{age:\"65 to 69\",male:39372,female:41007},{age:\"70 to 74\",male:27091,female:31903},{age:\"75 to 79\",male:20472,female:26808},{age:\"80 to 84\",male:15625,female:21401},{age:\"85 and Older\",male:13507,female:26876}],NH:[{age:\"0 to 5\",male:33531,female:32061},{age:\"10 to 14\",male:40472,female:39574},{age:\"15 to 17\",male:26632,female:25155},{age:\"18 to 21\",male:39600,female:39270},{age:\"22 to 24\",male:25067,female:23439},{age:\"25 to 29\",male:39514,female:37529},{age:\"30 to 34\",male:37282,female:37104},{age:\"35 to 39\",male:37177,female:38432},{age:\"40 to 44\",male:43571,female:43894},{age:\"45 to 49\",male:50559,female:51423},{age:\"5 to 9\",male:37873,female:36382},{age:\"50 to 54\",male:55573,female:57097},{age:\"55 to 59\",male:50802,female:52906},{age:\"60 to 64\",male:44934,female:45384},{age:\"65 to 69\",male:33322,female:34773},{age:\"70 to 74\",male:22786,female:25421},{age:\"75 to 79\",male:14988,female:18865},{age:\"80 to 84\",male:10661,female:14921},{age:\"85 and Older\",male:9140,female:17087}],NJ:[{age:\"0 to 5\",male:272239,female:261405},{age:\"10 to 14\",male:296798,female:281395},{age:\"15 to 17\",male:183608,female:174902},{age:\"18 to 21\",male:236406,female:219234},{age:\"22 to 24\",male:171414,female:162551},{age:\"25 to 29\",male:288078,female:278395},{age:\"30 to 34\",male:286242,female:288661},{age:\"35 to 39\",male:278323,female:286407},{age:\"40 to 44\",male:306371,female:315976},{age:\"45 to 49\",male:324604,female:340805},{age:\"5 to 9\",male:280348,female:272618},{age:\"50 to 54\",male:335379,female:351753},{age:\"55 to 59\",male:297889,female:316509},{age:\"60 to 64\",male:243909,female:272971},{age:\"65 to 69\",male:187928,female:216233},{age:\"70 to 74\",male:130458,female:162862},{age:\"75 to 79\",male:92629,female:121544},{age:\"80 to 84\",male:68009,female:107002},{age:\"85 and Older\",male:62395,female:130163}],NM:[{age:\"0 to 5\",male:70556,female:67433},{age:\"10 to 14\",male:72070,female:69774},{age:\"15 to 17\",male:42831,female:41474},{age:\"18 to 21\",male:61671,female:59289},{age:\"22 to 24\",male:47139,female:41506},{age:\"25 to 29\",male:73009,female:67866},{age:\"30 to 34\",male:69394,female:66383},{age:\"35 to 39\",male:62108,female:60810},{age:\"40 to 44\",male:61075,female:61508},{age:\"45 to 49\",male:62327,female:64988},{age:\"5 to 9\",male:72877,female:69675},{age:\"50 to 54\",male:69856,female:73683},{age:\"55 to 59\",male:66381,female:73952},{age:\"60 to 64\",male:61719,female:66285},{age:\"65 to 69\",male:48657,female:54175},{age:\"70 to 74\",male:35942,female:39668},{age:\"75 to 79\",male:24922,female:29968},{age:\"80 to 84\",male:16894,female:21049},{age:\"85 and Older\",male:12986,female:22217}],NV:[{age:\"0 to 5\",male:91556,female:87252},{age:\"10 to 14\",male:92376,female:90127},{age:\"15 to 17\",male:56635,female:53976},{age:\"18 to 21\",male:72185,female:68570},{age:\"22 to 24\",male:57429,female:54635},{age:\"25 to 29\",male:103079,female:98260},{age:\"30 to 34\",male:101626,female:97574},{age:\"35 to 39\",male:95952,female:91752},{age:\"40 to 44\",male:98405,female:96018},{age:\"45 to 49\",male:98297,female:92880},{age:\"5 to 9\",male:97639,female:92019},{age:\"50 to 54\",male:96647,female:93838},{age:\"55 to 59\",male:86430,female:90916},{age:\"60 to 64\",male:79651,female:82206},{age:\"65 to 69\",male:65973,female:70582},{age:\"70 to 74\",male:48879,female:50485},{age:\"75 to 79\",male:31798,female:33652},{age:\"80 to 84\",male:19722,female:23399},{age:\"85 and Older\",male:13456,female:22760}],NY:[{age:\"0 to 5\",male:601900,female:574532},{age:\"10 to 14\",male:602877,female:576846},{age:\"15 to 17\",male:381224,female:364149},{age:\"18 to 21\",male:579276,female:563517},{age:\"22 to 24\",male:423461,female:419351},{age:\"25 to 29\",male:722290,female:728064},{age:\"30 to 34\",male:668918,female:684340},{age:\"35 to 39\",male:607495,female:628810},{age:\"40 to 44\",male:632186,female:660306},{age:\"45 to 49\",male:674516,female:708960},{age:\"5 to 9\",male:588624,female:561622},{age:\"50 to 54\",male:695357,female:740342},{age:\"55 to 59\",male:633602,female:685163},{age:\"60 to 64\",male:540901,female:604110},{age:\"65 to 69\",male:409399,female:483158},{age:\"70 to 74\",male:287440,female:357971},{age:\"75 to 79\",male:207495,female:274626},{age:\"80 to 84\",male:150642,female:231063},{age:\"85 and Older\",male:134198,female:284443}],OH:[{age:\"0 to 5\",male:356598,female:339398},{age:\"10 to 14\",male:385542,female:371142},{age:\"15 to 17\",male:239825,female:228296},{age:\"18 to 21\",male:331115,female:318019},{age:\"22 to 24\",male:227916,female:225400},{age:\"25 to 29\",male:369646,female:367475},{age:\"30 to 34\",male:356757,female:359375},{age:\"35 to 39\",male:338273,female:340410},{age:\"40 to 44\",male:368578,female:375476},{age:\"45 to 49\",male:385388,female:394341},{age:\"5 to 9\",male:376976,female:358242},{age:\"50 to 54\",male:420561,female:438290},{age:\"55 to 59\",male:403067,female:427137},{age:\"60 to 64\",male:350563,female:374890},{age:\"65 to 69\",male:262844,female:292745},{age:\"70 to 74\",male:183419,female:222552},{age:\"75 to 79\",male:131940,female:173303},{age:\"80 to 84\",male:93267,female:140079},{age:\"85 and Older\",male:80618,female:166514}],OK:[{age:\"0 to 5\",male:135423,female:130297},{age:\"10 to 14\",male:133539,female:128110},{age:\"15 to 17\",male:79207,female:74080},{age:\"18 to 21\",male:115423,female:107651},{age:\"22 to 24\",male:85610,female:80749},{age:\"25 to 29\",male:135217,female:130966},{age:\"30 to 34\",male:132683,female:128496},{age:\"35 to 39\",male:118240,female:116104},{age:\"40 to 44\",male:118534,female:117501},{age:\"45 to 49\",male:117065,female:118300},{age:\"5 to 9\",male:137212,female:130040},{age:\"50 to 54\",male:129964,female:132941},{age:\"55 to 59\",male:121988,female:129033},{age:\"60 to 64\",male:105018,female:113144},{age:\"65 to 69\",male:82818,female:93914},{age:\"70 to 74\",male:62979,female:71856},{age:\"75 to 79\",male:43899,female:54848},{age:\"80 to 84\",male:29237,female:42044},{age:\"85 and Older\",male:22888,female:42715}],OR:[{age:\"0 to 5\",male:118561,female:112841},{age:\"10 to 14\",male:123223,female:116373},{age:\"15 to 17\",male:75620,female:71764},{age:\"18 to 21\",male:106121,female:103044},{age:\"22 to 24\",male:79106,female:75639},{age:\"25 to 29\",male:134241,female:131539},{age:\"30 to 34\",male:137090,female:135734},{age:\"35 to 39\",male:128812,female:126071},{age:\"40 to 44\",male:131405,female:126875},{age:\"45 to 49\",male:125373,female:125074},{age:\"5 to 9\",male:122920,female:119049},{age:\"50 to 54\",male:131932,female:137021},{age:\"55 to 59\",male:130434,female:141380},{age:\"60 to 64\",male:129063,female:136051},{age:\"65 to 69\",male:99577,female:106208},{age:\"70 to 74\",male:69028,female:77428},{age:\"75 to 79\",male:46055,female:53682},{age:\"80 to 84\",male:30900,female:41853},{age:\"85 and Older\",male:28992,female:53154}],PA:[{age:\"0 to 5\",male:367290,female:350371},{age:\"10 to 14\",male:393719,female:374666},{age:\"15 to 17\",male:250754,female:236670},{age:\"18 to 21\",male:378940,female:369819},{age:\"22 to 24\",male:251063,female:243391},{age:\"25 to 29\",male:420247,female:410193},{age:\"30 to 34\",male:391190,female:387225},{age:\"35 to 39\",male:365742,female:365646},{age:\"40 to 44\",male:399152,female:405848},{age:\"45 to 49\",male:435250,female:446328},{age:\"5 to 9\",male:381910,female:366854},{age:\"50 to 54\",male:472070,female:489057},{age:\"55 to 59\",male:456215,female:475044},{age:\"60 to 64\",male:390595,female:419924},{age:\"65 to 69\",male:301610,female:335127},{age:\"70 to 74\",male:212200,female:256188},{age:\"75 to 79\",male:156335,female:205974},{age:\"80 to 84\",male:117050,female:178358},{age:\"85 and Older\",male:104012,female:217532}],RI:[{age:\"0 to 5\",male:28289,female:26941},{age:\"10 to 14\",male:31383,female:30724},{age:\"15 to 17\",male:20093,female:19249},{age:\"18 to 21\",male:35376,female:37870},{age:\"22 to 24\",male:23397,female:21358},{age:\"25 to 29\",male:35958,female:34710},{age:\"30 to 34\",male:32410,female:32567},{age:\"35 to 39\",male:30325,female:31145},{age:\"40 to 44\",male:32542,female:34087},{age:\"45 to 49\",male:36151,female:38462},{age:\"5 to 9\",male:30462,female:27878},{age:\"50 to 54\",male:38419,female:41642},{age:\"55 to 59\",male:36706,female:39127},{age:\"60 to 64\",male:30349,female:33752},{age:\"65 to 69\",male:23462,female:26311},{age:\"70 to 74\",male:16385,female:19335},{age:\"75 to 79\",male:10978,female:14833},{age:\"80 to 84\",male:9224,female:13439},{age:\"85 and Older\",male:8479,female:19843}],SC:[{age:\"0 to 5\",male:148363,female:144218},{age:\"10 to 14\",male:153051,female:148064},{age:\"15 to 17\",male:92781,female:88090},{age:\"18 to 21\",male:150464,female:136857},{age:\"22 to 24\",male:99237,female:99178},{age:\"25 to 29\",male:156273,female:156982},{age:\"30 to 34\",male:148237,female:153197},{age:\"35 to 39\",male:139949,female:146281},{age:\"40 to 44\",male:151524,female:157192},{age:\"45 to 49\",male:153110,female:163562},{age:\"5 to 9\",male:156323,female:150943},{age:\"50 to 54\",male:161003,female:173752},{age:\"55 to 59\",male:150770,female:169238},{age:\"60 to 64\",male:141268,female:160890},{age:\"65 to 69\",male:120618,female:137154},{age:\"70 to 74\",male:85197,female:97581},{age:\"75 to 79\",male:55278,female:69067},{age:\"80 to 84\",male:33979,female:50585},{age:\"85 and Older\",male:24984,female:52336}],SD:[{age:\"0 to 5\",male:30615,female:29377},{age:\"10 to 14\",male:28360,female:26492},{age:\"15 to 17\",male:17193,female:16250},{age:\"18 to 21\",male:25514,female:24234},{age:\"22 to 24\",male:18413,female:16324},{age:\"25 to 29\",male:29131,female:26757},{age:\"30 to 34\",male:28133,female:26710},{age:\"35 to 39\",male:24971,female:23347},{age:\"40 to 44\",male:24234,female:23231},{age:\"45 to 49\",male:25555,female:24867},{age:\"5 to 9\",male:30399,female:28980},{age:\"50 to 54\",male:29754,female:29530},{age:\"55 to 59\",male:29075,female:28968},{age:\"60 to 64\",male:25633,female:25530},{age:\"65 to 69\",male:19320,female:18489},{age:\"70 to 74\",male:12964,female:14702},{age:\"75 to 79\",male:9646,female:12077},{age:\"80 to 84\",male:7669,female:10566},{age:\"85 and Older\",male:6898,female:13282}],TN:[{age:\"0 to 5\",male:204457,female:196347},{age:\"10 to 14\",male:217061,female:206350},{age:\"15 to 17\",male:129690,female:124122},{age:\"18 to 21\",male:183910,female:175377},{age:\"22 to 24\",male:132501,female:134905},{age:\"25 to 29\",male:210618,female:214944},{age:\"30 to 34\",male:209305,female:214151},{age:\"35 to 39\",male:200270,female:207520},{age:\"40 to 44\",male:216542,female:219178},{age:\"45 to 49\",male:217059,female:224473},{age:\"5 to 9\",male:210365,female:204494},{age:\"50 to 54\",male:223663,female:238025},{age:\"55 to 59\",male:210228,female:229974},{age:\"60 to 64\",male:186739,female:207022},{age:\"65 to 69\",male:153737,female:171357},{age:\"70 to 74\",male:108743,female:125362},{age:\"75 to 79\",male:72813,female:94077},{age:\"80 to 84\",male:46556,female:71212},{age:\"85 and Older\",male:33499,female:72969}],TX:[{age:\"0 to 5\",male:996070,female:955235},{age:\"10 to 14\",male:998209,female:959762},{age:\"15 to 17\",male:587712,female:561008},{age:\"18 to 21\",male:818590,female:756451},{age:\"22 to 24\",male:582570,female:556850},{age:\"25 to 29\",male:982673,female:948564},{age:\"30 to 34\",male:961403,female:947710},{age:\"35 to 39\",male:897542,female:898907},{age:\"40 to 44\",male:897922,female:908091},{age:\"45 to 49\",male:857621,female:865642},{age:\"5 to 9\",male:1021123,female:979891},{age:\"50 to 54\",male:861849,female:880746},{age:\"55 to 59\",male:761410,female:799294},{age:\"60 to 64\",male:635465,female:692072},{age:\"65 to 69\",male:483436,female:533368},{age:\"70 to 74\",male:330457,female:389996},{age:\"75 to 79\",male:228243,female:289446},{age:\"80 to 84\",male:153391,female:219572},{age:\"85 and Older\",male:115630,female:224693}],UT:[{age:\"0 to 5\",male:130873,female:124371},{age:\"10 to 14\",male:128076,female:120364},{age:\"15 to 17\",male:70832,female:66798},{age:\"18 to 21\",male:87877,female:92950},{age:\"22 to 24\",male:79431,female:71405},{age:\"25 to 29\",male:109125,female:106576},{age:\"30 to 34\",male:115198,female:110546},{age:\"35 to 39\",male:102771,female:99664},{age:\"40 to 44\",male:88181,female:83229},{age:\"45 to 49\",male:76552,female:74993},{age:\"5 to 9\",male:131094,female:125110},{age:\"50 to 54\",male:76913,female:78113},{age:\"55 to 59\",male:71490,female:73221},{age:\"60 to 64\",male:60996,female:63835},{age:\"65 to 69\",male:45491,female:49273},{age:\"70 to 74\",male:32191,female:35931},{age:\"75 to 79\",male:23112,female:27761},{age:\"80 to 84\",male:15827,female:20155},{age:\"85 and Older\",male:13199,female:19855}],VA:[{age:\"0 to 5\",male:262278,female:250000},{age:\"10 to 14\",male:266247,female:251516},{age:\"15 to 17\",male:160174,female:153149},{age:\"18 to 21\",male:248284,female:233796},{age:\"22 to 24\",male:175833,female:167676},{age:\"25 to 29\",male:296682,female:287052},{age:\"30 to 34\",male:286536,female:283804},{age:\"35 to 39\",male:264490,female:265951},{age:\"40 to 44\",male:278474,female:286095},{age:\"45 to 49\",male:286793,female:297558},{age:\"5 to 9\",male:264413,female:256891},{age:\"50 to 54\",male:296096,female:309898},{age:\"55 to 59\",male:262954,female:283219},{age:\"60 to 64\",male:228721,female:250389},{age:\"65 to 69\",male:178498,female:197033},{age:\"70 to 74\",male:123597,female:146376},{age:\"75 to 79\",male:82281,female:103044},{age:\"80 to 84\",male:55037,female:80081},{age:\"85 and Older\",male:43560,female:92154}],VT:[{age:\"0 to 5\",male:15766,female:14629},{age:\"10 to 14\",male:18674,female:17317},{age:\"15 to 17\",male:11909,female:11565},{age:\"18 to 21\",male:21686,female:20502},{age:\"22 to 24\",male:12648,female:11840},{age:\"25 to 29\",male:18005,female:17548},{age:\"30 to 34\",male:17565,female:18161},{age:\"35 to 39\",male:16856,female:17454},{age:\"40 to 44\",male:19431,female:19600},{age:\"45 to 49\",male:21315,female:22377},{age:\"5 to 9\",male:17073,female:16338},{age:\"50 to 54\",male:24629,female:26080},{age:\"55 to 59\",male:24925,female:25588},{age:\"60 to 64\",male:21769,female:23081},{age:\"65 to 69\",male:16842,female:17925},{age:\"70 to 74\",male:11855,female:12331},{age:\"75 to 79\",male:7639,female:9192},{age:\"80 to 84\",male:5291,female:8001},{age:\"85 and Older\",male:4695,female:8502}],WA:[{age:\"0 to 5\",male:228403,female:217400},{age:\"10 to 14\",male:224142,female:217269},{age:\"15 to 17\",male:136967,female:130193},{age:\"18 to 21\",male:195001,female:179996},{age:\"22 to 24\",male:151577,female:140876},{age:\"25 to 29\",male:260873,female:244497},{age:\"30 to 34\",male:252612,female:243147},{age:\"35 to 39\",male:230325,female:223596},{age:\"40 to 44\",male:234066,female:228073},{age:\"45 to 49\",male:233107,female:230232},{age:\"5 to 9\",male:227824,female:214378},{age:\"50 to 54\",male:245685,female:247691},{age:\"55 to 59\",male:231612,female:241813},{age:\"60 to 64\",male:206233,female:219560},{age:\"65 to 69\",male:158697,female:170678},{age:\"70 to 74\",male:107931,female:118093},{age:\"75 to 79\",male:70497,female:83476},{age:\"80 to 84\",male:48802,female:66167},{age:\"85 and Older\",male:43371,female:80604}],WI:[{age:\"0 to 5\",male:176217,female:168178},{age:\"10 to 14\",male:191911,female:180587},{age:\"15 to 17\",male:115730,female:110660},{age:\"18 to 21\",male:167063,female:161358},{age:\"22 to 24\",male:117861,female:113393},{age:\"25 to 29\",male:183464,female:176718},{age:\"30 to 34\",male:187494,female:181605},{age:\"35 to 39\",male:172689,female:168116},{age:\"40 to 44\",male:179862,female:176322},{age:\"45 to 49\",male:198114,female:197462},{age:\"5 to 9\",male:186006,female:180034},{age:\"50 to 54\",male:217886,female:219813},{age:\"55 to 59\",male:204370,female:206108},{age:\"60 to 64\",male:176161,female:178738},{age:\"65 to 69\",male:130349,female:136552},{age:\"70 to 74\",male:90955,female:103217},{age:\"75 to 79\",male:65738,female:81341},{age:\"80 to 84\",male:48337,female:67614},{age:\"85 and Older\",male:41178,female:82916}],WV:[{age:\"0 to 5\",male:52472,female:50287},{age:\"10 to 14\",male:55269,female:52689},{age:\"15 to 17\",male:34100,female:32359},{age:\"18 to 21\",male:51801,female:48967},{age:\"22 to 24\",male:35920,female:34241},{age:\"25 to 29\",male:54564,female:52255},{age:\"30 to 34\",male:56430,female:55121},{age:\"35 to 39\",male:55764,female:55399},{age:\"40 to 44\",male:60662,female:59373},{age:\"45 to 49\",male:61771,female:61257},{age:\"5 to 9\",male:53707,female:51490},{age:\"50 to 54\",male:66156,female:68671},{age:\"55 to 59\",male:66936,female:71680},{age:\"60 to 64\",male:65717,female:67056},{age:\"65 to 69\",male:51285,female:54807},{age:\"70 to 74\",male:36504,female:39946},{age:\"75 to 79\",male:25738,female:31619},{age:\"80 to 84\",male:16397,female:24351},{age:\"85 and Older\",male:12438,female:26221}],WY:[{age:\"0 to 5\",male:19649,female:18996},{age:\"10 to 14\",male:20703,female:17785},{age:\"15 to 17\",male:11500,female:10383},{age:\"18 to 21\",male:18008,female:15534},{age:\"22 to 24\",male:12727,female:11405},{age:\"25 to 29\",male:21459,female:19350},{age:\"30 to 34\",male:21008,female:19465},{age:\"35 to 39\",male:18573,female:17022},{age:\"40 to 44\",male:17553,female:16402},{age:\"45 to 49\",male:17580,female:16702},{age:\"5 to 9\",male:19198,female:19519},{age:\"50 to 54\",male:20337,female:20958},{age:\"55 to 59\",male:21523,female:21000},{age:\"60 to 64\",male:19048,female:18292},{age:\"65 to 69\",male:13999,female:13130},{age:\"70 to 74\",male:8710,female:9880},{age:\"75 to 79\",male:6149,female:6938},{age:\"80 to 84\",male:4442,female:5560},{age:\"85 and Older\",male:3395,female:5797}]};function aggregateData(list){var maleTotal=0;var femaleTotal=0;for(var i=0;i<list.length;i++){var row=list[i];maleTotal+=row.male;femaleTotal+=row.female;}for(var i=0;i<list.length;i++){var row=list[i];row.malePercent=-1*Math.round(row.male/maleTotal*10000)/100;row.femalePercent=Math.round(row.female/femaleTotal*10000)/100;}return list;}usData=aggregateData(usData);// ===========================================================\n// Root and wrapper container\n// ===========================================================\n// Create root and chart\nvar root=am5.Root[\"new\"](element);// Set themes\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create wrapper container\nvar container=root.container.children.push(am5.Container[\"new\"](root,{layout:root.horizontalLayout,width:am5.p100,height:am5.p100}));// Set up formats\nroot.numberFormatter.setAll({numberFormat:\"#.##as\"});// ===========================================================\n// XY chart\n// ===========================================================\n// Create chart\nvar chart=container.children.push(am5xy.XYChart[\"new\"](root,{panX:false,panY:false,wheelX:\"none\",wheelY:\"none\",layout:root.verticalLayout,width:am5.percent(60)}));// Create axes\nvar yAxis1=chart.yAxes.push(am5xy.CategoryAxis[\"new\"](root,{categoryField:\"age\",renderer:am5xy.AxisRendererY[\"new\"](root,{})}));yAxis1.get(\"renderer\").labels.template.setAll({paddingTop:0,fontWeight:\"400\",fontSize:11,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});yAxis1.get(\"renderer\").grid.template.setAll({stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-300\")),strokeWidth:1,strokeOpacity:1,strokeDasharray:[3]});yAxis1.data.setAll(usData);var yAxis2=chart.yAxes.push(am5xy.CategoryAxis[\"new\"](root,{categoryField:\"age\",renderer:am5xy.AxisRendererY[\"new\"](root,{opposite:true})}));yAxis2.get(\"renderer\").grid.template.setAll({stroke:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-300\")),strokeWidth:1,strokeOpacity:1,strokeDasharray:[3]});yAxis2.get(\"renderer\").labels.template.setAll({paddingTop:0,fontWeight:\"400\",fontSize:11,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});yAxis2.data.setAll(usData);var xAxis=chart.xAxes.push(am5xy.ValueAxis[\"new\"](root,{min:-10,max:10,numberFormat:\"#.s'%'\",renderer:am5xy.AxisRendererX[\"new\"](root,{minGridDistance:40})}));xAxis.get(\"renderer\").labels.template.setAll({paddingTop:20,fontWeight:\"400\",fontSize:11,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});xAxis.get(\"renderer\").grid.template.setAll({disabled:true,strokeOpacity:0});// Create series\nvar maleSeries=chart.series.push(am5xy.ColumnSeries[\"new\"](root,{name:\"Males\",xAxis:xAxis,yAxis:yAxis1,valueXField:\"malePercent\",categoryYField:\"age\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\")),clustered:false}));maleSeries.columns.template.setAll({tooltipText:\"Males, age {categoryY}: {male} ({malePercent.formatNumber('#.0s')}%)\",tooltipX:am5.p100,cornerRadiusBR:4,cornerRadiusTR:4,cornerRadiusBL:0,cornerRadiusTL:0});maleSeries.data.setAll(usData);var femaleSeries=chart.series.push(am5xy.ColumnSeries[\"new\"](root,{name:\"Males\",xAxis:xAxis,yAxis:yAxis1,valueXField:\"femalePercent\",categoryYField:\"age\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\")),clustered:false}));femaleSeries.columns.template.setAll({tooltipText:\"Males, age {categoryY}: {female} ({femalePercent.formatNumber('#.0s')}%)\",tooltipX:am5.p100,cornerRadiusBR:4,cornerRadiusTR:4,cornerRadiusBL:0,cornerRadiusTL:0});femaleSeries.data.setAll(usData);// Add labels\nvar maleLabel=chart.plotContainer.children.push(am5.Label[\"new\"](root,{text:\"Males\",fontSize:13,fontWeight:\"500\",y:5,x:5,//centerX: am5.p50,\nfill:maleSeries.get(\"fill\")}));var femaleLabel=chart.plotContainer.children.push(am5.Label[\"new\"](root,{text:\"Females\",fontSize:13,fontWeight:\"500\",y:5,x:am5.p100,centerX:am5.p100,dx:-5,fill:femaleSeries.get(\"fill\")}));// ===========================================================\n// Map chart\n// ===========================================================\n// Create chart\nvar map=container.children.push(am5map.MapChart[\"new\"](root,{panX:\"none\",panY:\"none\",wheelY:\"none\",projection:am5map.geoAlbersUsa(),width:am5.percent(40)}));chart.getTooltip().set(\"autoTextColor\",false);// Title\nvar title=map.children.push(am5.Label[\"new\"](root,{text:\"United States\",fontSize:14,fontWeight:\"500\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-800\")),y:20,x:am5.p50,centerX:am5.p50}));// Create polygon series\nvar polygonSeries=map.series.push(am5map.MapPolygonSeries[\"new\"](root,{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-300\")),geoJSON:am5geodata_usaLow}));polygonSeries.mapPolygons.template.setAll({tooltipText:\"{name}\",interactive:true});polygonSeries.mapPolygons.template.states.create(\"hover\",{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))});polygonSeries.mapPolygons.template.states.create(\"active\",{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))});var activePolygon;polygonSeries.mapPolygons.template.events.on(\"click\",function(ev){if(activePolygon){activePolygon.set(\"active\",false);}activePolygon=ev.target;activePolygon.set(\"active\",true);var state=ev.target.dataItem.dataContext.id.split(\"-\").pop();var data=aggregateData(stateData[state]);for(var i=0;i<data.length;i++){maleSeries.data.setIndex(i,data[i]);femaleSeries.data.setIndex(i,data[i]);}title.set(\"text\",ev.target.dataItem.dataContext.name);});});// end am5.ready()\n};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget24;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget24.init();});\"use strict\";// Class definition\nvar KTChartsWidget25=function(){// Private methods\nvar initChart1=function initChart1(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_25_chart_1\");if(!element){return;}// On amchart ready\nam5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/radar-chart/\nvar chart=root.container.children.push(am5radar.RadarChart[\"new\"](root,{panX:false,panY:false,wheelX:\"panX\",wheelY:\"zoomX\",innerRadius:am5.percent(40),radius:am5.percent(70),arrangeTooltips:false}));var cursor=chart.set(\"cursor\",am5radar.RadarCursor[\"new\"](root,{behavior:\"zoomX\"}));cursor.lineY.set(\"visible\",false);// Create axes and their renderers\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_axes\nvar xRenderer=am5radar.AxisRendererCircular[\"new\"](root,{minGridDistance:30});xRenderer.labels.template.setAll({textType:\"radial\",radius:10,paddingTop:0,paddingBottom:0,centerY:am5.p50,fontWeight:\"400\",fontSize:11,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-700\"))});xRenderer.grid.template.setAll({location:0.5,strokeDasharray:[2,2]});var xAxis=chart.xAxes.push(am5xy.CategoryAxis[\"new\"](root,{maxDeviation:0,categoryField:\"name\",renderer:xRenderer}));var yRenderer=am5radar.AxisRendererRadial[\"new\"](root,{minGridDistance:30});var yAxis=chart.yAxes.push(am5xy.ValueAxis[\"new\"](root,{renderer:yRenderer}));yRenderer.grid.template.setAll({strokeDasharray:[2,2]});// Create series\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_series\nvar series1=chart.series.push(am5radar.RadarLineSeries[\"new\"](root,{name:\"Revenue\",xAxis:xAxis,yAxis:yAxis,valueYField:\"value1\",categoryXField:\"name\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}));series1.strokes.template.setAll({strokeOpacity:0});series1.fills.template.setAll({visible:true,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\")),fillOpacity:0.5});var series2=chart.series.push(am5radar.RadarLineSeries[\"new\"](root,{name:\"Expense\",xAxis:xAxis,yAxis:yAxis,valueYField:\"value2\",categoryXField:\"name\",stacked:true,tooltip:am5.Tooltip[\"new\"](root,{labelText:\"Revenue: {value1}\\nExpense:{value2}\"}),fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))}));series2.strokes.template.setAll({strokeOpacity:0});series2.fills.template.setAll({visible:true,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\")),fillOpacity:0.5});var legend=chart.radarContainer.children.push(am5.Legend[\"new\"](root,{width:150,centerX:am5.p50,centerY:am5.p50}));legend.data.setAll([series1,series2]);// Set data\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Setting_data\nvar data=[{name:\"Openlane\",value1:160.2,value2:26.9},{name:\"Yearin\",value1:120.1,value2:50.5},{name:\"Goodsilron\",value1:150.7,value2:12.3},{name:\"Condax\",value1:69.4,value2:74.5},{name:\"Opentech\",value1:78.5,value2:29.7},{name:\"Golddex\",value1:77.6,value2:102.2},{name:\"Isdom\",value1:69.8,value2:22.6},{name:\"Plusstrip\",value1:63.6,value2:45.3},{name:\"Kinnamplus\",value1:59.7,value2:12.8},{name:\"Zumgoity\",value1:64.3,value2:19.6},{name:\"Stanredtax\",value1:52.9,value2:96.3},{name:\"Conecom\",value1:42.9,value2:11.9},{name:\"Zencorporation\",value1:40.9,value2:16.8},{name:\"Iselectrics\",value1:39.2,value2:9.9},{name:\"Treequote\",value1:76.6,value2:36.9},{name:\"Sumace\",value1:34.8,value2:14.6},{name:\"Lexiqvolax\",value1:32.1,value2:35.6},{name:\"Sunnamplex\",value1:31.8,value2:5.9},{name:\"Faxquote\",value1:29.3,value2:14.7},{name:\"Donware\",value1:23.0,value2:2.8},{name:\"Warephase\",value1:21.5,value2:12.1},{name:\"Donquadtech\",value1:19.7,value2:10.8},{name:\"Nam-zim\",value1:15.5,value2:4.1},{name:\"Y-corporation\",value1:14.2,value2:11.3}];series1.data.setAll(data);series2.data.setAll(data);xAxis.data.setAll(data);// Animate chart and series in\n// https://www.amcharts.com/docs/v5/concepts/animations/#Initial_animation\nseries1.appear(1000);series2.appear(1000);chart.appear(1000,100);});// end am5.ready()\n};var initChart2=function initChart2(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_25_chart_2\");if(!element){return;}// On amchart ready\nam5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/radar-chart/\nvar chart=root.container.children.push(am5radar.RadarChart[\"new\"](root,{panX:false,panY:false,wheelX:\"panX\",wheelY:\"zoomX\",innerRadius:am5.percent(40),radius:am5.percent(70),arrangeTooltips:false}));var cursor=chart.set(\"cursor\",am5radar.RadarCursor[\"new\"](root,{behavior:\"zoomX\"}));cursor.lineY.set(\"visible\",false);// Create axes and their renderers\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_axes\nvar xRenderer=am5radar.AxisRendererCircular[\"new\"](root,{minGridDistance:30});xRenderer.labels.template.setAll({textType:\"radial\",radius:10,paddingTop:0,paddingBottom:0,centerY:am5.p50,fontWeight:\"400\",fontSize:11,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-700\"))});xRenderer.grid.template.setAll({location:0.5,strokeDasharray:[2,2]});var xAxis=chart.xAxes.push(am5xy.CategoryAxis[\"new\"](root,{maxDeviation:0,categoryField:\"name\",renderer:xRenderer}));var yRenderer=am5radar.AxisRendererRadial[\"new\"](root,{minGridDistance:30});var yAxis=chart.yAxes.push(am5xy.ValueAxis[\"new\"](root,{renderer:yRenderer}));yRenderer.grid.template.setAll({strokeDasharray:[2,2]});// Create series\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_series\nvar series1=chart.series.push(am5radar.RadarLineSeries[\"new\"](root,{name:\"Revenue\",xAxis:xAxis,yAxis:yAxis,valueYField:\"value1\",categoryXField:\"name\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}));series1.strokes.template.setAll({strokeOpacity:0});series1.fills.template.setAll({visible:true,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\")),fillOpacity:0.5});var series2=chart.series.push(am5radar.RadarLineSeries[\"new\"](root,{name:\"Expense\",xAxis:xAxis,yAxis:yAxis,valueYField:\"value2\",categoryXField:\"name\",stacked:true,tooltip:am5.Tooltip[\"new\"](root,{labelText:\"Revenue: {value1}\\nExpense:{value2}\"}),fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))}));series2.strokes.template.setAll({strokeOpacity:0});series2.fills.template.setAll({visible:true,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\")),fillOpacity:0.5});var legend=chart.radarContainer.children.push(am5.Legend[\"new\"](root,{width:150,centerX:am5.p50,centerY:am5.p50}));legend.data.setAll([series1,series2]);// Set data\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Setting_data\nvar data=[{name:\"Openlane\",value1:160.2,value2:66.9},{name:\"Yearin\",value1:150.1,value2:50.5},{name:\"Goodsilron\",value1:120.7,value2:32.3},{name:\"Condax\",value1:89.4,value2:74.5},{name:\"Opentech\",value1:78.5,value2:29.7},{name:\"Golddex\",value1:77.6,value2:102.2},{name:\"Isdom\",value1:69.8,value2:22.6},{name:\"Plusstrip\",value1:63.6,value2:45.3},{name:\"Kinnamplus\",value1:59.7,value2:12.8},{name:\"Zumgoity\",value1:54.3,value2:19.6},{name:\"Stanredtax\",value1:52.9,value2:96.3},{name:\"Conecom\",value1:42.9,value2:11.9},{name:\"Zencorporation\",value1:40.9,value2:16.8},{name:\"Iselectrics\",value1:39.2,value2:9.9},{name:\"Treequote\",value1:36.6,value2:36.9},{name:\"Sumace\",value1:34.8,value2:14.6},{name:\"Lexiqvolax\",value1:32.1,value2:35.6},{name:\"Sunnamplex\",value1:31.8,value2:5.9},{name:\"Faxquote\",value1:29.3,value2:14.7},{name:\"Donware\",value1:23.0,value2:2.8},{name:\"Warephase\",value1:21.5,value2:12.1},{name:\"Donquadtech\",value1:19.7,value2:10.8},{name:\"Nam-zim\",value1:15.5,value2:4.1},{name:\"Y-corporation\",value1:14.2,value2:11.3}];series1.data.setAll(data);series2.data.setAll(data);xAxis.data.setAll(data);// Animate chart and series in\n// https://www.amcharts.com/docs/v5/concepts/animations/#Initial_animation\nseries1.appear(1000);series2.appear(1000);chart.appear(1000,100);});// end am5.ready()\n};// Public methods\nreturn{init:function init(){initChart1();initChart2();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget25;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget25.init();});\"use strict\";// Class definition\nvar KTChartsWidget26=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_26\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-primary\");var lightColor=KTUtil.getCssVariableValue(\"--bs-primary\");var chartInfo=element.getAttribute(\"data-kt-chart-info\");var options={series:[{name:chartInfo,data:[34.5,34.5,35,35,35.5,35.5,35,35,35.5,35.5,35,35,34.5,34.5,35,35,35.5,35.5,35]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},plotOptions:{},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"gradient\",gradient:{shadeIntensity:1,opacityFrom:0.4,opacityTo:0,stops:[0,80,100]}},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:[\"\",\"Apr 02\",\"Apr 03\",\"Apr 04\",\"Apr 05\",\"Apr 06\",\"Apr 07\",\"Apr 08\",\"Apr 09\",\"Apr 10\",\"Apr 11\",\"Apr 12\",\"Apr 13\",\"Apr 14\",\"Apr 17\",\"Apr 18\",\"Apr 19\",\"Apr 21\",\"\"],axisBorder:{show:false},axisTicks:{show:false},tickAmount:6,labels:{rotate:0,rotateAlways:true,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{max:36.3,min:33,tickAmount:6,labels:{style:{colors:labelColor,fontSize:\"12px\"},formatter:function formatter(val){return\"$\"+parseInt(10*val);}}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return\"$\"+parseInt(10*val);}}},colors:[lightColor],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:3}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget26;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget26.init();});\"use strict\";// Class definition\nvar KTChartsWidget27=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_27\");if(!element){return;}var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-800\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var maxValue=18;var options={series:[{name:\"Sessions\",data:[12.478,7.546,6.083,5.041,4.42]}],chart:{fontFamily:\"inherit\",type:\"bar\",height:350,toolbar:{show:false}},plotOptions:{bar:{borderRadius:8,horizontal:true,distributed:true,barHeight:50,dataLabels:{position:\"bottom\"// use 'bottom' for left and 'top' for right align(textAnchor)\n}}},dataLabels:{// Docs: https://apexcharts.com/docs/options/datalabels/\nenabled:true,textAnchor:\"start\",offsetX:0,formatter:function formatter(val,opts){var val=val*1000;var Format=wNumb({//prefix: '$',\n//suffix: ',-',\nthousand:\",\"});return Format.to(val);},style:{fontSize:\"14px\",fontWeight:\"600\",align:\"left\"}},legend:{show:false},colors:[\"#3E97FF\",\"#F1416C\",\"#50CD89\",\"#FFC700\",\"#7239EA\"],xaxis:{categories:[\"USA\",\"India\",\"Canada\",\"Brasil\",\"France\"],labels:{formatter:function formatter(val){return val+\"K\";},style:{colors:labelColor,fontSize:\"14px\",fontWeight:\"600\",align:\"left\"}},axisBorder:{show:false}},yaxis:{labels:{formatter:function formatter(val,opt){if(Number.isInteger(val)){var percentage=parseInt(val*100/maxValue).toString();return val+\" - \"+percentage+\"%\";}else{return val;}},style:{colors:labelColor,fontSize:\"14px\",fontWeight:\"600\"},offsetY:2,align:\"left\"}},grid:{borderColor:borderColor,xaxis:{lines:{show:true}},yaxis:{lines:{show:false}},strokeDashArray:4},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return val;}}}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget27;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget27.init();});\"use strict\";// Class definition\nvar KTChartsWidget28=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_28\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-info\");var options={series:[{name:\"Links\",data:[190,230,230,200,200,190,190,200,200,220,220,200,200,210,210]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"gradient\",gradient:{shadeIntensity:1,opacityFrom:0.4,opacityTo:0,stops:[0,80,100]}},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:[\"May 04\",\"May 05\",\"May 06\",\"May 09\",\"May 10\",\"May 12\",\"May 14\",\"May 17\",\"May 18\",\"May 20\",\"May 22\",\"May 24\",\"May 26\",\"May 28\",\"May 30\"],axisBorder:{show:false},offsetX:20,axisTicks:{show:false},tickAmount:3,labels:{rotate:0,rotateAlways:false,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{tickAmount:4,max:250,min:100,labels:{style:{colors:labelColor,fontSize:\"12px\"},formatter:function formatter(val){return val;}}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return val;}}},colors:[baseColor],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:3}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget28;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget28.init();});\"use strict\";// Class definition\nvar KTChartsWidget29=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_29\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-warning\");var options={series:[{name:\"Position\",data:[4,7.5,7.5,6,6,4,4,6,6,8,8,6,6,7,7]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"gradient\",gradient:{shadeIntensity:1,opacityFrom:0.4,opacityTo:0,stops:[0,80,100]}},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:[\"Apr 02\",\"Apr 03\",\"Apr 04\",\"Apr 05\",\"Apr 06\",\"Apr 09\",\"Apr 10\",\"Apr 12\",\"Apr 14\",\"Apr 17\",\"Apr 18\",\"Apr 18\",\"Apr 20\",\"Apr 22\",\"Apr 24\"],axisBorder:{show:false},axisTicks:{show:false},offsetX:20,tickAmount:4,labels:{rotate:0,rotateAlways:false,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{tickAmount:4,max:10,min:1,labels:{style:{colors:labelColor,fontSize:\"12px\"},formatter:function formatter(val){return val;}}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return val;}}},colors:[baseColor],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:3}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget29;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget29.init();});\"use strict\";// Class definition\nvar KTChartsWidget3=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_3\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-success\");var lightColor=KTUtil.getCssVariableValue(\"--bs-success\");var options={series:[{name:\"Sales\",data:[18,18,20,20,18,18,22,22,20,20,18,18,20,20,18,18,20,20,22]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},plotOptions:{},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"gradient\",gradient:{shadeIntensity:1,opacityFrom:0.4,opacityTo:0,stops:[0,80,100]}},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:[\"\",\"Apr 02\",\"Apr 03\",\"Apr 04\",\"Apr 05\",\"Apr 06\",\"Apr 07\",\"Apr 08\",\"Apr 09\",\"Apr 10\",\"Apr 11\",\"Apr 12\",\"Apr 13\",\"Apr 14\",\"Apr 15\",\"Apr 16\",\"Apr 17\",\"Apr 18\",\"\"],axisBorder:{show:false},axisTicks:{show:false},tickAmount:6,labels:{rotate:0,rotateAlways:true,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{tickAmount:4,max:24,min:10,labels:{style:{colors:labelColor,fontSize:\"12px\"},formatter:function formatter(val){return\"$\"+val+\"K\";}}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return\"$\"+val+\"K\";}}},colors:[lightColor],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:3}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget3;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget3.init();});\"use strict\";// Class definition\nvar KTChartsWidget30=function(){// Private methods\nvar initChart=function initChart(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_30_chart\");if(!element){return;}am5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/\n// start and end angle must be set both for chart and series\nvar chart=root.container.children.push(am5percent.PieChart[\"new\"](root,{startAngle:180,endAngle:360,layout:root.verticalLayout,innerRadius:am5.percent(50)}));// Create series\n// https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Series\n// start and end angle must be set both for chart and series\nvar series=chart.series.push(am5percent.PieSeries[\"new\"](root,{startAngle:180,endAngle:360,valueField:\"value\",categoryField:\"category\",alignLabels:false}));series.labels.template.setAll({fontWeight:\"400\",fontSize:13,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-500\"))});series.states.create(\"hidden\",{startAngle:180,endAngle:180});series.slices.template.setAll({cornerRadius:5});series.ticks.template.setAll({forceHidden:true});// Set data\n// https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Setting_data\nseries.data.setAll([{value:10,category:\"One\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))},{value:9,category:\"Two\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))},{value:6,category:\"Three\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-danger\"))},{value:5,category:\"Four\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-warning\"))},{value:4,category:\"Five\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-info\"))},{value:3,category:\"Six\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-secondary\"))}]);series.appear(1000,100);});};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget30;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget30.init();});\"use strict\";// Class definition\nvar KTChartsWidget31=function(){// Private methods\nvar initChart1=function initChart1(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_charts_widget_31_chart\");if(!element){return;}// On amchart ready\nam5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create chart\n// https://www.amcharts.com/docs/v5/charts/radar-chart/\nvar chart=root.container.children.push(am5radar.RadarChart[\"new\"](root,{panX:false,panY:false,wheelX:\"panX\",wheelY:\"zoomX\",innerRadius:am5.percent(40),radius:am5.percent(70),arrangeTooltips:false}));var cursor=chart.set(\"cursor\",am5radar.RadarCursor[\"new\"](root,{behavior:\"zoomX\"}));cursor.lineY.set(\"visible\",false);// Create axes and their renderers\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_axes\nvar xRenderer=am5radar.AxisRendererCircular[\"new\"](root,{minGridDistance:30});xRenderer.labels.template.setAll({textType:\"radial\",radius:10,paddingTop:0,paddingBottom:0,centerY:am5.p50,fontWeight:\"400\",fontSize:11,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-700\"))});xRenderer.grid.template.setAll({location:0.5,strokeDasharray:[2,2]});var xAxis=chart.xAxes.push(am5xy.CategoryAxis[\"new\"](root,{maxDeviation:0,categoryField:\"name\",renderer:xRenderer}));var yRenderer=am5radar.AxisRendererRadial[\"new\"](root,{minGridDistance:30});var yAxis=chart.yAxes.push(am5xy.ValueAxis[\"new\"](root,{renderer:yRenderer}));yRenderer.grid.template.setAll({strokeDasharray:[2,2]});// Create series\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_series\nvar series1=chart.series.push(am5radar.RadarLineSeries[\"new\"](root,{name:\"Revenue\",xAxis:xAxis,yAxis:yAxis,valueYField:\"value1\",categoryXField:\"name\",fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\"))}));series1.strokes.template.setAll({strokeOpacity:0});series1.fills.template.setAll({visible:true,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\")),fillOpacity:0.5});var series2=chart.series.push(am5radar.RadarLineSeries[\"new\"](root,{name:\"Expense\",xAxis:xAxis,yAxis:yAxis,valueYField:\"value2\",categoryXField:\"name\",stacked:true,tooltip:am5.Tooltip[\"new\"](root,{labelText:\"Revenue: {value1}\\nExpense:{value2}\"}),fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))}));series2.strokes.template.setAll({strokeOpacity:0});series2.fills.template.setAll({visible:true,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-primary\")),fillOpacity:0.5});var legend=chart.radarContainer.children.push(am5.Legend[\"new\"](root,{width:150,centerX:am5.p50,centerY:am5.p50}));legend.data.setAll([series1,series2]);// Set data\n// https://www.amcharts.com/docs/v5/charts/radar-chart/#Setting_data\nvar data=[{name:\"Openlane\",value1:160.2,value2:26.9},{name:\"Yearin\",value1:120.1,value2:50.5},{name:\"Goodsilron\",value1:150.7,value2:12.3},{name:\"Condax\",value1:69.4,value2:74.5},{name:\"Opentech\",value1:78.5,value2:29.7},{name:\"Golddex\",value1:77.6,value2:102.2},{name:\"Isdom\",value1:69.8,value2:22.6},{name:\"Plusstrip\",value1:63.6,value2:45.3},{name:\"Kinnamplus\",value1:59.7,value2:12.8},{name:\"Zumgoity\",value1:64.3,value2:19.6},{name:\"Stanredtax\",value1:52.9,value2:96.3},{name:\"Conecom\",value1:42.9,value2:11.9},{name:\"Zencorporation\",value1:40.9,value2:16.8},{name:\"Iselectrics\",value1:39.2,value2:9.9},{name:\"Treequote\",value1:76.6,value2:36.9},{name:\"Sumace\",value1:34.8,value2:14.6},{name:\"Lexiqvolax\",value1:32.1,value2:35.6},{name:\"Sunnamplex\",value1:31.8,value2:5.9},{name:\"Faxquote\",value1:29.3,value2:14.7},{name:\"Donware\",value1:23.0,value2:2.8},{name:\"Warephase\",value1:21.5,value2:12.1},{name:\"Donquadtech\",value1:19.7,value2:10.8},{name:\"Nam-zim\",value1:15.5,value2:4.1},{name:\"Y-corporation\",value1:14.2,value2:11.3}];series1.data.setAll(data);series2.data.setAll(data);xAxis.data.setAll(data);// Animate chart and series in\n// https://www.amcharts.com/docs/v5/concepts/animations/#Initial_animation\nseries1.appear(1000);series2.appear(1000);chart.appear(1000,100);});// end am5.ready()\n};// Public methods\nreturn{init:function init(){initChart1();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget31;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget31.init();});\"use strict\";// Class definition\nvar KTChartsWidget32=function(){// Private methods\nvar initChart=function initChart(tabSelector,chartSelector,data,initByDefault){var element=document.querySelector(chartSelector);if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-900\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var options={series:[{name:\"Deliveries\",data:data}],chart:{fontFamily:\"inherit\",type:\"bar\",height:height,toolbar:{show:false}},plotOptions:{bar:{horizontal:false,columnWidth:[\"22%\"],borderRadius:5,dataLabels:{position:\"top\"// top, center, bottom\n},startingShape:\"flat\"}},legend:{show:false},dataLabels:{enabled:true,offsetY:-28,style:{fontSize:\"13px\",colors:[\"labelColor\"]}},stroke:{show:true,width:2,colors:[\"transparent\"]},xaxis:{categories:[\"Grossey\",\"Pet Food\",\"Flowers\",\"Restaurant\",\"Kids Toys\",\"Clothing\",\"Still Water\"],axisBorder:{show:false},axisTicks:{show:false},labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-500\"),fontSize:\"13px\"}},crosshairs:{fill:{gradient:{opacityFrom:0,opacityTo:0}}}},yaxis:{labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-500\"),fontSize:\"13px\"}}},fill:{opacity:1},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"}},colors:[KTUtil.getCssVariableValue(\"--bs-primary\"),KTUtil.getCssVariableValue(\"--bs-light-primary\")],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}}};var chart=new ApexCharts(element,options);var init=false;var tab=document.querySelector(tabSelector);if(initByDefault===true){chart.render();init=true;}tab.addEventListener(\"shown.bs.tab\",function(event){if(init==false){chart.render();init=true;}});};// Public methods\nreturn{init:function init(){initChart(\"#kt_charts_widget_32_tab_1\",\"#kt_charts_widget_32_chart_1\",[54,42,75,110,23,87,50],true);initChart(\"#kt_charts_widget_32_tab_2\",\"#kt_charts_widget_32_chart_2\",[25,55,35,50,45,20,31],false);initChart(\"#kt_charts_widget_32_tab_3\",\"#kt_charts_widget_32_chart_3\",[45,15,35,70,45,50,21],false);}};}();// Webpack support\nif(true){module.exports=KTChartsWidget32;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget32.init();});\"use strict\";// Class definition\nvar KTChartsWidget33=function(){// Private methods\nvar initChart=function initChart(tabSelector,chartSelector,data,labels,initByDefault){var element=document.querySelector(chartSelector);if(!element){return;}var color=element.getAttribute(\"data-kt-chart-color\");var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-\"+color);var options={series:[{name:\"Etherium \",data:data}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"gradient\",gradient:{shadeIntensity:1,opacityFrom:0.4,opacityTo:0.2,stops:[15,120,100]}},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:labels,axisBorder:{show:false},axisTicks:{show:false},offsetX:20,tickAmount:4,labels:{rotate:0,rotateAlways:false,show:false,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{tickAmount:4,max:4000,min:1000,labels:{show:false}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return val+\"$\";}}},colors:[baseColor],grid:{borderColor:borderColor,strokeDashArray:3,yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:3}};var chart=new ApexCharts(element,options);var init=false;var tab=document.querySelector(tabSelector);if(initByDefault===true){chart.render();init=true;}tab.addEventListener(\"shown.bs.tab\",function(event){if(init==false){chart.render();init=true;}});};// Public methods\nreturn{init:function init(){initChart(\"#kt_charts_widget_33_tab_1\",\"#kt_charts_widget_33_chart_1\",[2100,3200,3200,2400,2400,1800,1800,2400,2400,3200,3200,3000,3000,3250,3250],[\"10AM\",\"10.30AM\",\"11AM\",\"11.15AM\",\"11.30AM\",\"12PM\",\"1PM\",\"2PM\",\"3PM\",\"4PM\",\"5PM\",\"6PM\",\"7PM\",\"8PM\",\"9PM\"],true);initChart(\"#kt_charts_widget_33_tab_2\",\"#kt_charts_widget_33_chart_2\",[2300,2300,2000,3200,3200,2800,2400,2400,3100,2900,3100,3100,2600,2600,3200],[\"Apr 01\",\"Apr 02\",\"Apr 03\",\"Apr 04\",\"Apr 05\",\"Apr 06\",\"Apr 07\",\"Apr 08\",\"Apr 09\",\"Apr 10\",\"Apr 11\",\"Apr 12\",\"Apr 13\",\"Apr 14\",\"Apr 15\"],false);initChart(\"#kt_charts_widget_33_tab_3\",\"#kt_charts_widget_33_chart_3\",[2600,3200,2300,2300,2000,3200,3100,2900,3200,3200,2600,3100,2800,2400,2400],[\"Apr 02\",\"Apr 03\",\"Apr 04\",\"Apr 05\",\"Apr 06\",\"Apr 09\",\"Apr 10\",\"Apr 12\",\"Apr 14\",\"Apr 17\",\"Apr 18\",\"Apr 18\",\"Apr 20\",\"Apr 22\",\"Apr 24\"],false);initChart(\"#kt_charts_widget_33_tab_4\",\"#kt_charts_widget_33_chart_4\",[1800,1800,2400,2400,3200,3200,3000,2100,3200,3300,2400,2400,3000,3200,3100],[\"Jun 2021\",\"Jul 2021\",\"Aug 2021\",\"Sep 2021\",\"Oct 2021\",\"Nov 2021\",\"Dec 2021\",\"Jan 2022\",\"Feb 2022\",\"Mar 2022\",\"Apr 2022\",\"May 2022\",\"Jun 2022\",\"Jul 2022\",\"Aug 2022\"],false);initChart(\"#kt_charts_widget_33_tab_5\",\"#kt_charts_widget_33_chart_5\",[3000,2100,3300,3100,1800,1800,2400,2400,3100,3100,2400,2400,3000,2400,2800],[\"Sep 2021\",\"Oct 2021\",\"Nov 2021\",\"Dec 2021\",\"Jan 2022\",\"Feb 2022\",\"Mar 2022\",\"Apr 2022\",\"May 2022\",\"Jun 2022\",\"Jul 2022\",\"Aug 2022\",\"Sep 2022\",\"Oct 2022\",\"Nov 2022\"],false);}};}();// Webpack support\nif(true){module.exports=KTChartsWidget33;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget33.init();});\"use strict\";// Class definition\nvar KTChartsWidget34=function(){// Private methods\nvar initChart=function initChart(tabSelector,chartSelector,data,labels,initByDefault){var element=document.querySelector(chartSelector);if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var color=element.getAttribute(\"data-kt-chart-color\");var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-\"+color);var options={series:[{name:\"Earnings\",data:data}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"gradient\",gradient:{shadeIntensity:1,opacityFrom:0.4,opacityTo:0.2,stops:[15,120,100]}},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:labels,axisBorder:{show:false},axisTicks:{show:false},offsetX:20,tickAmount:4,labels:{rotate:0,rotateAlways:false,show:false,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{tickAmount:4,max:4000,min:1000,labels:{show:false}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return val+\"$\";}}},colors:[baseColor],grid:{borderColor:borderColor,strokeDashArray:3,yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:3}};var chart=new ApexCharts(element,options);var init=false;var tab=document.querySelector(tabSelector);if(initByDefault===true){chart.render();init=true;}tab.addEventListener(\"shown.bs.tab\",function(event){if(init==false){chart.render();init=true;}});};// Public methods\nreturn{init:function init(){initChart(\"#kt_charts_widget_34_tab_1\",\"#kt_charts_widget_34_chart_1\",[2100,2800,2800,2400,2400,1800,1800,2400,2400,3200,3200,2800,2800,3250,3250],[\"10AM\",\"10.30AM\",\"11AM\",\"11.15AM\",\"11.30AM\",\"12PM\",\"1PM\",\"2PM\",\"3PM\",\"4PM\",\"5PM\",\"6PM\",\"7PM\",\"8PM\",\"9PM\"],true);initChart(\"#kt_charts_widget_34_tab_2\",\"#kt_charts_widget_34_chart_2\",[2300,2300,2000,3100,3100,2800,2400,2400,3100,2900,3200,3200,2600,2600,3200],[\"Apr 01\",\"Apr 02\",\"Apr 03\",\"Apr 04\",\"Apr 05\",\"Apr 06\",\"Apr 07\",\"Apr 08\",\"Apr 09\",\"Apr 10\",\"Apr 11\",\"Apr 12\",\"Apr 13\",\"Apr 14\",\"Apr 15\"],false);initChart(\"#kt_charts_widget_34_tab_3\",\"#kt_charts_widget_34_chart_3\",[2600,3400,2300,2300,2000,3100,3100,2900,3200,3200,2600,3100,2800,2400,2400],[\"Apr 02\",\"Apr 03\",\"Apr 04\",\"Apr 05\",\"Apr 06\",\"Apr 09\",\"Apr 10\",\"Apr 12\",\"Apr 14\",\"Apr 17\",\"Apr 18\",\"Apr 18\",\"Apr 20\",\"Apr 22\",\"Apr 24\"],false);initChart(\"#kt_charts_widget_34_tab_4\",\"#kt_charts_widget_34_chart_4\",[1800,1800,2400,2400,3100,3100,3000,2100,3200,3200,2400,2400,3000,3200,3100],[\"Jun 2021\",\"Jul 2021\",\"Aug 2021\",\"Sep 2021\",\"Oct 2021\",\"Nov 2021\",\"Dec 2021\",\"Jan 2022\",\"Feb 2022\",\"Mar 2022\",\"Apr 2022\",\"May 2022\",\"Jun 2022\",\"Jul 2022\",\"Aug 2022\"],false);initChart(\"#kt_charts_widget_34_tab_5\",\"#kt_charts_widget_34_chart_5\",[3000,2100,3200,3200,1800,1800,2400,2400,3100,3100,2400,2400,3000,2400,2800],[\"Sep 2021\",\"Oct 2021\",\"Nov 2021\",\"Dec 2021\",\"Jan 2022\",\"Feb 2022\",\"Mar 2022\",\"Apr 2022\",\"May 2022\",\"Jun 2022\",\"Jul 2022\",\"Aug 2022\",\"Sep 2022\",\"Oct 2022\",\"Nov 2022\"],false);}};}();// Webpack support\nif(true){module.exports=KTChartsWidget34;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget34.init();});\"use strict\";// Class definition\nvar KTChartsWidget35=function(){// Private methods\nvar initChart=function initChart(tabSelector,chartSelector,data,labels,initByDefault){var element=document.querySelector(chartSelector);if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var color=element.getAttribute(\"data-kt-chart-color\");var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-\"+color);var options={series:[{name:\"Earnings\",data:data}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"gradient\",gradient:{shadeIntensity:1,opacityFrom:0.4,opacityTo:0.2,stops:[15,120,100]}},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:labels,axisBorder:{show:false},axisTicks:{show:false},offsetX:20,tickAmount:4,labels:{rotate:0,rotateAlways:false,show:false,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{tickAmount:4,max:4000,min:1000,labels:{show:false}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return val+\"$\";}}},colors:[baseColor],grid:{borderColor:borderColor,strokeDashArray:3,yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:3}};var chart=new ApexCharts(element,options);var init=false;var tab=document.querySelector(tabSelector);if(initByDefault===true){chart.render();init=true;}tab.addEventListener(\"shown.bs.tab\",function(event){if(init==false){chart.render();init=true;}});};// Public methods\nreturn{init:function init(){initChart(\"#kt_charts_widget_35_tab_1\",\"#kt_charts_widget_35_chart_1\",[2100,3100,3100,2400,2400,1800,1800,2400,2400,3200,3200,2800,2800,3250,3250],[\"10AM\",\"10.30AM\",\"11AM\",\"11.15AM\",\"11.30AM\",\"12PM\",\"1PM\",\"2PM\",\"3PM\",\"4PM\",\"5PM\",\"6PM\",\"7PM\",\"8PM\",\"9PM\"],true);initChart(\"#kt_charts_widget_35_tab_2\",\"#kt_charts_widget_35_chart_2\",[2300,2300,2000,3200,3200,2800,2400,2400,3100,2900,3200,3200,2600,2600,3200],[\"Apr 01\",\"Apr 02\",\"Apr 03\",\"Apr 04\",\"Apr 05\",\"Apr 06\",\"Apr 07\",\"Apr 08\",\"Apr 09\",\"Apr 10\",\"Apr 11\",\"Apr 12\",\"Apr 13\",\"Apr 14\",\"Apr 15\"],false);initChart(\"#kt_charts_widget_35_tab_3\",\"#kt_charts_widget_35_chart_3\",[2600,3200,2300,2300,2000,3200,3100,2900,3400,3400,2600,3200,2800,2400,2400],[\"Apr 02\",\"Apr 03\",\"Apr 04\",\"Apr 05\",\"Apr 06\",\"Apr 09\",\"Apr 10\",\"Apr 12\",\"Apr 14\",\"Apr 17\",\"Apr 18\",\"Apr 18\",\"Apr 20\",\"Apr 22\",\"Apr 24\"],false);initChart(\"#kt_charts_widget_35_tab_4\",\"#kt_charts_widget_35_chart_4\",[1800,1800,2400,2400,3200,3200,3000,2100,3200,3200,2400,2400,3000,3200,3100],[\"Jun 2021\",\"Jul 2021\",\"Aug 2021\",\"Sep 2021\",\"Oct 2021\",\"Nov 2021\",\"Dec 2021\",\"Jan 2022\",\"Feb 2022\",\"Mar 2022\",\"Apr 2022\",\"May 2022\",\"Jun 2022\",\"Jul 2022\",\"Aug 2022\"],false);initChart(\"#kt_charts_widget_35_tab_5\",\"#kt_charts_widget_35_chart_5\",[3200,2100,3200,3200,3200,3500,3000,2400,3250,2400,2400,3250,3000,2400,2800],[\"Sep 2021\",\"Oct 2021\",\"Nov 2021\",\"Dec 2021\",\"Jan 2022\",\"Feb 2022\",\"Mar 2022\",\"Apr 2022\",\"May 2022\",\"Jun 2022\",\"Jul 2022\",\"Aug 2022\",\"Sep 2022\",\"Oct 2022\",\"Nov 2022\"],false);}};}();// Webpack support\nif(true){module.exports=KTChartsWidget35;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget35.init();});\"use strict\";// Class definition\nvar KTChartsWidget4=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_4\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-primary\");var lightColor=KTUtil.getCssVariableValue(\"--bs-primary\");var options={series:[{name:\"Sales\",data:[34.5,34.5,35,35,35.5,35.5,35,35,35.5,35.5,35,35,34.5,34.5,35,35,35.5,35.5,35]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},plotOptions:{},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"gradient\",gradient:{shadeIntensity:1,opacityFrom:0.4,opacityTo:0,stops:[0,80,100]}},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:[\"\",\"Apr 02\",\"Apr 03\",\"Apr 04\",\"Apr 05\",\"Apr 06\",\"Apr 07\",\"Apr 08\",\"Apr 09\",\"Apr 10\",\"Apr 11\",\"Apr 12\",\"Apr 13\",\"Apr 14\",\"Apr 17\",\"Apr 18\",\"Apr 19\",\"Apr 21\",\"\"],axisBorder:{show:false},axisTicks:{show:false},tickAmount:6,labels:{rotate:0,rotateAlways:true,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{max:36.3,min:33,tickAmount:6,labels:{style:{colors:labelColor,fontSize:\"12px\"},formatter:function formatter(val){return\"$\"+parseInt(10*val);}}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return\"$\"+parseInt(10*val);}}},colors:[lightColor],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:3}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget4;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget4.init();});\"use strict\";// Class definition\nvar KTChartsWidget5=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_5\");if(!element){return;}var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var options={series:[{data:[15,12,10,8,7,4,3],show:false}],chart:{type:\"bar\",height:350,toolbar:{show:false}},plotOptions:{bar:{borderRadius:4,horizontal:true,distributed:true,barHeight:23}},dataLabels:{enabled:false},legend:{show:false},colors:[\"#3E97FF\",\"#F1416C\",\"#50CD89\",\"#FFC700\",\"#7239EA\",\"#50CDCD\",\"#3F4254\"],xaxis:{categories:[\"Phones\",\"Laptops\",\"Headsets\",\"Games\",\"Keyboardsy\",\"Monitors\",\"Speakers\"],labels:{formatter:function formatter(val){return val+\"K\";},style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-400\"),fontSize:\"14px\",fontWeight:\"600\",align:\"left\"}},axisBorder:{show:false}},yaxis:{labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-800\"),fontSize:\"14px\",fontWeight:\"600\"},offsetY:2,align:\"left\"}},grid:{borderColor:borderColor,xaxis:{lines:{show:true}},yaxis:{lines:{show:false}},strokeDashArray:4}};var chart=new ApexCharts(element,options);setTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget5;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget5.init();});\"use strict\";// Class definition\nvar KTChartsWidget6=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_6\");if(!element){return;}var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-800\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var maxValue=18;var options={series:[{name:\"Sales\",data:[15,12,10,8,7]}],chart:{fontFamily:\"inherit\",type:\"bar\",height:350,toolbar:{show:false}},plotOptions:{bar:{borderRadius:8,horizontal:true,distributed:true,barHeight:50,dataLabels:{position:\"bottom\"// use 'bottom' for left and 'top' for right align(textAnchor)\n}}},dataLabels:{// Docs: https://apexcharts.com/docs/options/datalabels/\nenabled:true,textAnchor:\"start\",offsetX:0,formatter:function formatter(val,opts){var val=val*1000;var Format=wNumb({//prefix: '$',\n//suffix: ',-',\nthousand:\",\"});return Format.to(val);},style:{fontSize:\"14px\",fontWeight:\"600\",align:\"left\"}},legend:{show:false},colors:[\"#3E97FF\",\"#F1416C\",\"#50CD89\",\"#FFC700\",\"#7239EA\"],xaxis:{categories:[\"ECR - 90%\",\"FGI - 82%\",\"EOQ - 75%\",\"FMG - 60%\",\"PLG - 50%\"],labels:{formatter:function formatter(val){return val+\"K\";},style:{colors:labelColor,fontSize:\"14px\",fontWeight:\"600\",align:\"left\"}},axisBorder:{show:false}},yaxis:{labels:{formatter:function formatter(val,opt){if(Number.isInteger(val)){var percentage=parseInt(val*100/maxValue).toString();return val+\" - \"+percentage+\"%\";}else{return val;}},style:{colors:labelColor,fontSize:\"14px\",fontWeight:\"600\"},offsetY:2,align:\"left\"}},grid:{borderColor:borderColor,xaxis:{lines:{show:true}},yaxis:{lines:{show:false}},strokeDashArray:4},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return val+\"K\";}}}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget6;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget6.init();});\"use strict\";// Class definition\nvar KTChartsWidget7=function(){// Private methods\nvar initChart=function initChart(chartSelector){var element=document.querySelector(chartSelector);if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var options={series:[{name:\"Net Profit\",data:data1},{name:\"Revenue\",data:data2}],chart:{fontFamily:\"inherit\",type:\"bar\",height:height,toolbar:{show:false}},plotOptions:{bar:{horizontal:false,columnWidth:[\"40%\"],borderRadius:[6]}},legend:{show:false},dataLabels:{enabled:false},stroke:{show:true,width:2,colors:[\"transparent\"]},xaxis:{categories:[\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\"],axisBorder:{show:false},axisTicks:{show:false},labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-700\"),fontSize:\"12px\"}}},yaxis:{labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-700\"),fontSize:\"12px\"}}},fill:{opacity:1},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return\"$\"+val+\" thousands\";}}},colors:[KTUtil.getCssVariableValue(\"--bs-primary\"),KTUtil.getCssVariableValue(\"--bs-light-primary\")],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}}};var chart=new ApexCharts(element,options);var init=false;var tab=document.querySelector(tabSelector);if(initByDefault===true){chart.render();init=true;}tab.addEventListener(\"shown.bs.tab\",function(event){if(init==false){chart.render();init=true;}});var chart=new ApexCharts(element,options);chart.render();};// Public methods\nreturn{init:function init(){initChart(\"#kt_chart_widget_7_tab_1\",\"#kt_chart_widget_7_chart_1\",[44,55,57,56,61,58],[76,85,101,98,87,105],true);initChart(\"#kt_chart_widget_7_tab_2\",\"#kt_chart_widget_7_chart_2\",[35,60,35,50,45,30],[65,80,50,80,75,105],false);initChart(\"#kt_chart_widget_7_tab_3\",\"#kt_chart_widget_7_chart_3\",[25,40,45,50,40,60],[76,85,101,98,87,105],false);initChart(\"#kt_chart_widget_7_tab_4\",\"#kt_chart_widget_7_chart_4\",[50,35,45,55,30,40],[76,85,101,98,87,105],false);}};}();// Webpack support\nif(true){module.exports=KTChartsWidget7;}// On document ready\nKTUtil.onDOMContentLoaded(function(){//KTChartsWidget7.init();\n});\"use strict\";// Class definition\nvar KTChartsWidget8=function(){// Private methods\nvar initChart=function initChart(toggle,selector,data,initByDefault){var element=document.querySelector(selector);if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var options={series:[{name:\"Social Campaigns\",data:data[0]// array value is of the format [x, y, z] where x (timestamp) and y are the two axes coordinates,\n},{name:\"Email Newsletter\",data:data[1]},{name:\"TV Campaign\",data:data[2]},{name:\"Google Ads\",data:data[3]},{name:\"Courses\",data:data[4]},{name:\"Radio\",data:data[5]}],chart:{fontFamily:\"inherit\",type:\"bubble\",height:height,toolbar:{show:false}},plotOptions:{bubble:{}},stroke:{show:false,width:0},legend:{show:false},dataLabels:{enabled:false},xaxis:{type:\"numeric\",tickAmount:7,min:0,max:700,axisBorder:{show:false},axisTicks:{show:true,height:0},labels:{show:true,trim:true,style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-500\"),fontSize:\"13px\"}}},yaxis:{tickAmount:7,min:0,max:700,labels:{style:{colors:KTUtil.getCssVariableValue(\"--bs-gray-500\"),fontSize:\"13px\"}}},tooltip:{style:{fontSize:\"12px\"},x:{formatter:function formatter(val){return\"Clicks: \"+val;}},y:{formatter:function formatter(val){return\"$\"+val+\"K\";}},z:{title:\"Impression: \"}},crosshairs:{show:true,position:\"front\",stroke:{color:KTUtil.getCssVariableValue(\"--bs-border-dashed-color\"),width:1,dashArray:0}},colors:[KTUtil.getCssVariableValue(\"--bs-primary\"),KTUtil.getCssVariableValue(\"--bs-success\"),KTUtil.getCssVariableValue(\"--bs-warning\"),KTUtil.getCssVariableValue(\"--bs-danger\"),KTUtil.getCssVariableValue(\"--bs-info\"),\"#43CED7\"],fill:{opacity:1},grid:{borderColor:borderColor,strokeDashArray:4,padding:{right:20},yaxis:{lines:{show:true}}}};var initialized=false;var chart=new ApexCharts(element,options);var tab=document.querySelector(toggle);if(initByDefault===true){// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();initialized=true;},200);}tab.addEventListener(\"shown.bs.tab\",function(event){if(initialized===false){chart.render();initialized=true;}});};// Public methods\nreturn{init:function init(){var data1=[[[100,250,30]],[[225,300,35]],[[300,350,25]],[[350,350,20]],[[450,400,25]],[[550,350,35]]];var data2=[[[125,300,40]],[[250,350,35]],[[350,450,30]],[[450,250,25]],[[500,500,30]],[[600,250,28]]];initChart(\"#kt_chart_widget_8_week_toggle\",\"#kt_chart_widget_8_week_chart\",data1,false);initChart(\"#kt_chart_widget_8_month_toggle\",\"#kt_chart_widget_8_month_chart\",data2,true);}};}();// Webpack support\nif(true){module.exports=KTChartsWidget8;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget8.init();});\"use strict\";// Class definition\nvar KTChartsWidget9=function(){// Private methods\nvar initChart=function initChart(){var element=document.getElementById(\"kt_charts_widget_9\");if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-400\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-gray-200\");var secondaryColor=KTUtil.getCssVariableValue(\"--bs-primary\");var options={series:[{name:\"Net Profit\",data:[21,21,26,26,31,31,27]},{name:\"Revenue\",data:[12,16,16,21,21,18,18]}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},plotOptions:{},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"solid\",opacity:1},stroke:{curve:\"smooth\"},xaxis:{categories:[\"\",\"06 Sep\",\"13 Sep\",\"20 Sep\",\"27 Sep\",\"30 Sep\",\"\"],axisBorder:{show:false},axisTicks:{show:false},labels:{style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{position:\"front\",stroke:{color:labelColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{labels:{style:{colors:labelColor,fontSize:\"12px\"}}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"},y:{formatter:function formatter(val){return\"$\"+val+\" thousands\";}}},crosshairs:{show:true,position:\"front\",stroke:{color:KTUtil.getCssVariableValue(\"--bs-border-dashed-color\"),width:1,dashArray:0}},colors:[baseColor,secondaryColor],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}},markers:{colors:[baseColor,secondaryColor],strokeColor:[KTUtil.getCssVariableValue(\"--bs-danger\"),KTUtil.getCssVariableValue(\"--bs-warning\")],strokeWidth:3}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart();}};}();// Webpack support\nif(true){module.exports=KTChartsWidget9;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTChartsWidget9.init();});\"use strict\";// Class definition\nvar KTFormsWidget1=function(){// Private methods\nvar initForm1=function initForm1(){var optionFormat=function optionFormat(item){if(!item.id){return item.text;}var span=document.createElement(\"span\");var template=\"\";template+='<img src=\"'+item.element.getAttribute(\"data-kt-select2-icon\")+'\" class=\"rounded-circle h-20px me-2\" alt=\"image\"/>';template+=item.text;span.innerHTML=template;return $(span);};// Init Select2 --- more info: https://select2.org/\n$(\"#kt_forms_widget_1_select_1\").select2({placeholder:\"Select coin\",minimumResultsForSearch:Infinity,templateSelection:optionFormat,templateResult:optionFormat});};var initForm2=function initForm2(){var optionFormat=function optionFormat(item){if(!item.id){return item.text;}var span=document.createElement(\"span\");var template=\"\";template+='<img src=\"'+item.element.getAttribute(\"data-kt-select2-icon\")+'\" class=\"rounded-circle h-20px me-2\" alt=\"image\"/>';template+=item.text;span.innerHTML=template;return $(span);};// Init Select2 --- more info: https://select2.org/\n$(\"#kt_forms_widget_1_select_2\").select2({placeholder:\"Select coin\",minimumResultsForSearch:Infinity,templateSelection:optionFormat,templateResult:optionFormat});};// Public methods\nreturn{init:function init(){initForm1();}};}();// Webpack support\nif(true){module.exports=KTFormsWidget1;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTFormsWidget1.init();});\"use strict\";// Class definition\nvar KTTimelineWidget24=function(){// Private methods\nvar handleActions=function handleActions(){var card=document.querySelector(\"#kt_list_widget_24\");if(!card){return;}// Checkbox Handler\nKTUtil.on(card,'[data-kt-element=\"follow\"]',\"click\",function(e){if(this.innerText===\"Following\"){this.innerText=\"Follow\";this.classList.add(\"btn-light-primary\");this.classList.remove(\"btn-primary\");this.blur();}else{this.innerText=\"Following\";this.classList.add(\"btn-primary\");this.classList.remove(\"btn-light-primary\");this.blur();}});};// Public methods\nreturn{init:function init(){handleActions();}};}();// Webpack support\nif(true){module.exports=KTTimelineWidget24;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTTimelineWidget24.init();});\"use strict\";// Class definition\nvar KTMapsWidget1=function(){// Private methods\nvar initMap=function initMap(){// Check if amchart library is included\nif(typeof am5===\"undefined\"){return;}var element=document.getElementById(\"kt_maps_widget_1_map\");if(!element){return;}// On amchart ready\nam5.ready(function(){// Create root element\n// https://www.amcharts.com/docs/v5/getting-started/#Root_element\nvar root=am5.Root[\"new\"](element);// Set themes\n// https://www.amcharts.com/docs/v5/concepts/themes/\nroot.setThemes([am5themes_Animated[\"new\"](root)]);// Create the map chart\n// https://www.amcharts.com/docs/v5/charts/map-chart/\nvar chart=root.container.children.push(am5map.MapChart[\"new\"](root,{panX:\"translateX\",panY:\"translateY\",projection:am5map.geoMercator(),paddingLeft:0,paddingrIGHT:0,paddingBottom:0}));// Create main polygon series for countries\n// https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\nvar polygonSeries=chart.series.push(am5map.MapPolygonSeries[\"new\"](root,{geoJSON:am5geodata_worldLow,exclude:[\"AQ\"]}));polygonSeries.mapPolygons.template.setAll({tooltipText:\"{name}\",toggleKey:\"active\",interactive:true,fill:am5.color(KTUtil.getCssVariableValue(\"--bs-gray-300\"))});polygonSeries.mapPolygons.template.states.create(\"hover\",{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))});polygonSeries.mapPolygons.template.states.create(\"active\",{fill:am5.color(KTUtil.getCssVariableValue(\"--bs-success\"))});// Highlighted Series\n// Create main polygon series for countries\n// https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\nvar polygonSeriesHighlighted=chart.series.push(am5map.MapPolygonSeries[\"new\"](root,{//geoJSON: am5geodata_usaLow,\ngeoJSON:am5geodata_worldLow,include:[\"US\",\"BR\",\"DE\",\"AU\",\"JP\"]}));polygonSeriesHighlighted.mapPolygons.template.setAll({tooltipText:\"{name}\",toggleKey:\"active\",interactive:true});var colors=am5.ColorSet[\"new\"](root,{});polygonSeriesHighlighted.mapPolygons.template.set(\"fill\",am5.color(KTUtil.getCssVariableValue(\"--bs-primary\")));polygonSeriesHighlighted.mapPolygons.template.states.create(\"hover\",{fill:root.interfaceColors.get(\"primaryButtonHover\")});polygonSeriesHighlighted.mapPolygons.template.states.create(\"active\",{fill:root.interfaceColors.get(\"primaryButtonHover\")});// Add zoom control\n// https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control\n//chart.set(\"zoomControl\", am5map.ZoomControl.new(root, {}));\n// Set clicking on \"water\" to zoom out\nchart.chartContainer.get(\"background\").events.on(\"click\",function(){chart.goHome();});// Make stuff animate on load\nchart.appear(1000,100);});// end am5.ready()\n};// Public methods\nreturn{init:function init(){initMap();}};}();// Webpack support\nif(true){module.exports=KTMapsWidget1;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTMapsWidget1.init();});\"use strict\";// Class definition\nvar KTPlayersWidget1=function(){// Private methods\nvar initPlayers=function initPlayers(){// https://www.w3schools.com/jsref/dom_obj_audio.asp\n// Toggle Handler\nKTUtil.on(document.body,'[data-kt-element=\"list-play-button\"]',\"click\",function(e){var currentButton=this;var audio=document.querySelector('[data-kt-element=\"audio-track-1\"]');var playIcon=this.querySelector('[data-kt-element=\"list-play-icon\"]');var pauseIcon=this.querySelector('[data-kt-element=\"list-pause-icon\"]');if(pauseIcon.classList.contains(\"d-none\")){audio.play();playIcon.classList.add(\"d-none\");pauseIcon.classList.remove(\"d-none\");}else{audio.pause();playIcon.classList.remove(\"d-none\");pauseIcon.classList.add(\"d-none\");}var buttons=[].slice.call(document.querySelectorAll('[data-kt-element=\"list-play-button\"]'));buttons.map(function(button){if(button!==currentButton){var playIcon=button.querySelector('[data-kt-element=\"list-play-icon\"]');var pauseIcon=button.querySelector('[data-kt-element=\"list-pause-icon\"]');playIcon.classList.remove(\"d-none\");pauseIcon.classList.add(\"d-none\");}});});};// Public methods\nreturn{init:function init(){initPlayers();}};}();// Webpack support\nif(true){module.exports=KTPlayersWidget2;}// Window load\nwindow.addEventListener(\"load\",function(){KTPlayersWidget1.init();});\"use strict\";// Class definition\nvar KTPlayersWidget2=function(){// Private methods\nvar initPlayer=function initPlayer(){// https://www.w3schools.com/jsref/dom_obj_audio.asp\nvar element=document.getElementById(\"kt_player_widget_2\");if(!element){return;}var audio=element.querySelector('[data-kt-element=\"audio-track-1\"]');var progress=element.querySelector('[data-kt-element=\"progress\"]');var currentTime=element.querySelector('[data-kt-element=\"current-time\"]');var duration=element.querySelector('[data-kt-element=\"duration\"]');var playButton=element.querySelector('[data-kt-element=\"play-button\"]');var playIcon=element.querySelector('[data-kt-element=\"play-icon\"]');var pauseIcon=element.querySelector('[data-kt-element=\"pause-icon\"]');var replayButton=element.querySelector('[data-kt-element=\"replay-button\"]');var shuffleButton=element.querySelector('[data-kt-element=\"shuffle-button\"]');var playNextButton=element.querySelector('[data-kt-element=\"play-next-button\"]');var playPrevButton=element.querySelector('[data-kt-element=\"play-prev-button\"]');var formatTime=function formatTime(time){var s=parseInt(time%60);var m=parseInt(time/60%60);return m+\":\"+(s<10?\"0\":\"\")+s;};// Duration\nduration.innerHTML=formatTime(audio.duration);// Update progress\nvar setBarProgress=function setBarProgress(){progress.value=audio.currentTime/audio.duration*100;};// Handle audio update\nvar handleAudioUpdate=function handleAudioUpdate(){currentTime.innerHTML=formatTime(audio.currentTime);setBarProgress();if(this.ended){playIcon.classList.remove(\"d-none\");pauseIcon.classList.add(\"d-none\");}};audio.addEventListener(\"timeupdate\",handleAudioUpdate);// Handle play\nplayButton.addEventListener(\"click\",function(){if(audio.duration>0&&!audio.paused){audio.pause();playIcon.classList.remove(\"d-none\");pauseIcon.classList.add(\"d-none\");}else if(audio.readyState>=2){audio.play();playIcon.classList.add(\"d-none\");pauseIcon.classList.remove(\"d-none\");}});// Handle replay\nreplayButton.addEventListener(\"click\",function(){if(audio.readyState>=2){audio.currentTime=0;audio.play();playIcon.classList.add(\"d-none\");pauseIcon.classList.remove(\"d-none\");}});// Handle prev play\nplayPrevButton.addEventListener(\"click\",function(){if(audio.readyState>=2){audio.currentTime=0;audio.play();playIcon.classList.add(\"d-none\");pauseIcon.classList.remove(\"d-none\");}});// Handle next play\nplayNextButton.addEventListener(\"click\",function(){if(audio.readyState>=2){audio.currentTime=0;audio.play();playIcon.classList.add(\"d-none\");pauseIcon.classList.remove(\"d-none\");}});// Shuffle replay\nshuffleButton.addEventListener(\"click\",function(){if(audio.readyState>=2){audio.currentTime=0;audio.play();playIcon.classList.add(\"d-none\");pauseIcon.classList.remove(\"d-none\");}});// Handle track change\nprogress.addEventListener(\"change\",function(){audio.currentTime=progress.value;playIcon.classList.add(\"d-none\");pauseIcon.classList.remove(\"d-none\");audio.play();});};// Public methods\nreturn{init:function init(){initPlayer();}};}();// Webpack support\nif(true){module.exports=KTPlayersWidget2;}// Window load\nwindow.addEventListener(\"load\",function(){KTPlayersWidget2.init();});\"use strict\";// Class definition\nvar KTSlidersWidget1=function(){// Private methods\nvar initChart=function initChart(query,data){var element=document.querySelector(query);if(!element){return;}if(element.classList.contains(\"initialized\")){return;}var height=parseInt(KTUtil.css(element,\"height\"));var baseColor=KTUtil.getCssVariableValue(\"--bs-\"+\"primary\");var lightColor=KTUtil.getCssVariableValue(\"--bs-light-\"+\"primary\");var options={series:[data],chart:{fontFamily:\"inherit\",height:height,type:\"radialBar\",sparkline:{enabled:true}},plotOptions:{radialBar:{hollow:{margin:0,size:\"45%\"},dataLabels:{showOn:\"always\",name:{show:false},value:{show:false}},track:{background:lightColor,strokeWidth:\"100%\"}}},colors:[baseColor],stroke:{lineCap:\"round\"},labels:[\"Progress\"]};var chart=new ApexCharts(element,options);chart.render();element.classList.add(\"initialized\");};// Public methods\nreturn{init:function init(){// Init default chart\ninitChart(\"#kt_slider_widget_1_chart_1\",76);var carousel=document.querySelector(\"#kt_sliders_widget_1_slider\");if(!carousel){return;}carousel.addEventListener(\"slid.bs.carousel\",function(e){if(e.to===1){// Init second chart\ninitChart(\"#kt_slider_widget_1_chart_2\",55);}if(e.to===2){// Init third chart\ninitChart(\"#kt_slider_widget_1_chart_3\",25);}});}};}();// Webpack support\nif(true){module.exports=KTSlidersWidget1;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTSlidersWidget1.init();});\"use strict\";// Class definition\nvar KTSlidersWidget3=function(){// Private methods\nvar initChart=function initChart(query,color,data){var element=document.querySelector(query);if(!element){return;}if(element.classList.contains(\"initialized\")){return;}var height=parseInt(KTUtil.css(element,\"height\"));var labelColor=KTUtil.getCssVariableValue(\"--bs-gray-500\");var borderColor=KTUtil.getCssVariableValue(\"--bs-border-dashed-color\");var baseColor=KTUtil.getCssVariableValue(\"--bs-\"+color);var options={series:[{name:\"Lessons\",data:data}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false}},plotOptions:{},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"gradient\",gradient:{shadeIntensity:1,opacityFrom:0.3,opacityTo:0.7,stops:[0,90,100]}},stroke:{curve:\"smooth\",show:true,width:3,colors:[baseColor]},xaxis:{categories:[\"\",\"Apr 05\",\"Apr 06\",\"Apr 07\",\"Apr 08\",\"Apr 09\",\"Apr 11\",\"Apr 12\",\"Apr 14\",\"Apr 15\",\"Apr 16\",\"Apr 17\",\"Apr 18\",\"\"],axisBorder:{show:false},axisTicks:{show:false},tickAmount:6,labels:{rotate:0,rotateAlways:true,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{position:\"front\",stroke:{color:baseColor,width:1,dashArray:3}},tooltip:{enabled:true,formatter:undefined,offsetY:0,style:{fontSize:\"12px\"}}},yaxis:{tickAmount:4,max:24,min:10,labels:{style:{colors:labelColor,fontSize:\"12px\"}}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{style:{fontSize:\"12px\"}},colors:[baseColor],grid:{borderColor:borderColor,strokeDashArray:4,yaxis:{lines:{show:true}}},markers:{strokeColor:baseColor,strokeWidth:3}};var chart=new ApexCharts(element,options);chart.render();element.classList.add(\"initialized\");};// Public methods\nreturn{init:function init(){// Init default chart\ninitChart(\"#kt_sliders_widget_3_chart_1\",\"danger\",[19,21,21,20,20,18,18,20,20,22,22,21,21,22]);var carousel=document.querySelector(\"#kt_sliders_widget_3_slider\");if(!carousel){return;}carousel.addEventListener(\"slid.bs.carousel\",function(e){if(e.to===1){// Init second chart\ninitChart(\"#kt_sliders_widget_3_chart_2\",\"primary\",[18,22,22,20,20,18,18,20,20,18,18,20,20,22]);}});}};}();// Webpack support\nif(true){module.exports=KTSlidersWidget3;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTSlidersWidget3.init();});\"use strict\";// Class definition\nvar KTTablesWidget14=function(){// Private methods\nvar initChart=function initChart(chartSelector,data){var element=document.querySelector(chartSelector);if(!element){return;}var height=parseInt(KTUtil.css(element,\"height\"));var color=element.getAttribute(\"data-kt-chart-color\");var labelColor=KTUtil.getCssVariableValue(\"--bs-\"+\"gray-800\");var strokeColor=KTUtil.getCssVariableValue(\"--bs-\"+\"gray-300\");var baseColor=KTUtil.getCssVariableValue(\"--bs-\"+color);var lightColor=KTUtil.getCssVariableValue(\"--bs-white\");var options={series:[{name:\"Net Profit\",data:data}],chart:{fontFamily:\"inherit\",type:\"area\",height:height,toolbar:{show:false},zoom:{enabled:false},sparkline:{enabled:true}},plotOptions:{},legend:{show:false},dataLabels:{enabled:false},fill:{type:\"solid\",opacity:1},stroke:{curve:\"smooth\",show:true,width:2,colors:[baseColor]},xaxis:{categories:[\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\"],axisBorder:{show:false},axisTicks:{show:false},labels:{show:false,style:{colors:labelColor,fontSize:\"12px\"}},crosshairs:{show:false,position:\"front\",stroke:{color:strokeColor,width:1,dashArray:3}},tooltip:{enabled:false}},yaxis:{min:0,max:60,labels:{show:false,style:{colors:labelColor,fontSize:\"12px\"}}},states:{normal:{filter:{type:\"none\",value:0}},hover:{filter:{type:\"none\",value:0}},active:{allowMultipleDataPointsSelection:false,filter:{type:\"none\",value:0}}},tooltip:{enabled:false},colors:[lightColor],markers:{colors:[lightColor],strokeColor:[baseColor],strokeWidth:3}};var chart=new ApexCharts(element,options);// Set timeout to properly get the parent elements width\nsetTimeout(function(){chart.render();},200);};// Public methods\nreturn{init:function init(){initChart(\"#kt_table_widget_14_chart_1\",[7,10,5,21,6,11,5,23,5,11,18,7,21,13]);initChart(\"#kt_table_widget_14_chart_2\",[17,5,23,2,21,9,17,23,4,24,9,17,21,7]);initChart(\"#kt_table_widget_14_chart_3\",[2,24,5,17,7,2,12,24,5,24,2,8,12,7]);initChart(\"#kt_table_widget_14_chart_4\",[24,3,5,19,3,7,25,14,5,14,2,8,5,17]);initChart(\"#kt_table_widget_14_chart_5\",[3,23,1,19,3,17,3,9,25,4,2,18,25,3]);}};}();// Webpack support\nif(true){module.exports=KTTablesWidget14;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTTablesWidget14.init();});\"use strict\";// Class definition\nvar KTTablesWidget3=function(){var table;var datatable;// Private methods\nvar initDatatable=function initDatatable(){// Init datatable --- more info on datatables: https://datatables.net/manual/\ndatatable=$(table).DataTable({info:false,order:[],paging:false,pageLength:false});};var handleTabStates=function handleTabStates(){var tabs=document.querySelector('[data-kt-table-widget-3=\"tabs_nav\"]');var tabButtons=tabs.querySelectorAll('[data-kt-table-widget-3=\"tab\"]');var tabClasses=[\"border-bottom\",\"border-3\",\"border-primary\"];tabButtons.forEach(function(tab){tab.addEventListener(\"click\",function(e){var _tab$classList;// Get datatable filter value\nvar value=tab.getAttribute(\"data-kt-table-widget-3-value\");tabButtons.forEach(function(t){var _t$classList;(_t$classList=t.classList).remove.apply(_t$classList,tabClasses);t.classList.add(\"text-muted\");});tab.classList.remove(\"text-muted\");(_tab$classList=tab.classList).add.apply(_tab$classList,tabClasses);// Filter datatable\nif(value===\"Show All\"){datatable.search(\"\").draw();}else{datatable.search(value).draw();}});});};// Handle status filter dropdown\nvar handleStatusFilter=function handleStatusFilter(){var select=document.querySelector('[data-kt-table-widget-3=\"filter_status\"]');$(select).on(\"select2:select\",function(e){var value=$(this).val();if(value===\"Show All\"){datatable.search(\"\").draw();}else{datatable.search(value).draw();}});};// Public methods\nreturn{init:function init(){table=document.querySelector(\"#kt_widget_table_3\");if(!table){return;}initDatatable();handleTabStates();handleStatusFilter();}};}();// Webpack support\nif(true){module.exports=KTTablesWidget3;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTTablesWidget3.init();});\"use strict\";// Class definition\nvar KTTablesWidget4=function(){var table;var datatable;var template;// Private methods\nvar initDatatable=function initDatatable(){// Get subtable template\nvar subtable=document.querySelector('[data-kt-table-widget-4=\"subtable_template\"]');template=subtable.cloneNode(true);template.classList.remove(\"d-none\");// Remove subtable template\nsubtable.parentNode.removeChild(subtable);// Init datatable --- more info on datatables: https://datatables.net/manual/\ndatatable=$(table).DataTable({info:false,order:[],lengthChange:false,pageLength:6,ordering:false,paging:false,columnDefs:[{orderable:false,targets:0},// Disable ordering on column 0 (checkbox)\n{orderable:false,targets:6}// Disable ordering on column 6 (actions)\n]});// Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\ndatatable.on(\"draw\",function(){resetSubtable();handleActionButton();});};// Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\nvar handleSearchDatatable=function handleSearchDatatable(){var filterSearch=document.querySelector('[data-kt-table-widget-4=\"search\"]');filterSearch.addEventListener(\"keyup\",function(e){datatable.search(e.target.value).draw();});};// Handle status filter\nvar handleStatusFilter=function handleStatusFilter(){var select=document.querySelector('[data-kt-table-widget-4=\"filter_status\"]');$(select).on(\"select2:select\",function(e){var value=$(this).val();if(value===\"Show All\"){datatable.search(\"\").draw();}else{datatable.search(value).draw();}});};// Subtable data sample\nvar data=[{image:\"76\",name:\"Go Pro 8\",description:\"Latest  version of Go Pro.\",cost:\"500.00\",qty:\"1\",total:\"500.00\",stock:\"12\"},{image:\"60\",name:\"Bose Earbuds\",description:\"Top quality earbuds from Bose.\",cost:\"300.00\",qty:\"1\",total:\"300.00\",stock:\"8\"},{image:\"211\",name:\"Dry-fit Sports T-shirt\",description:\"Comfortable sportswear.\",cost:\"89.00\",qty:\"1\",total:\"89.00\",stock:\"18\"},{image:\"21\",name:\"Apple Airpod 3\",description:\"Apple's latest earbuds.\",cost:\"200.00\",qty:\"2\",total:\"400.00\",stock:\"32\"},{image:\"83\",name:\"Nike Pumps\",description:\"Apple's latest headphones.\",cost:\"200.00\",qty:\"1\",total:\"200.00\",stock:\"8\"}];// Handle action button\nvar handleActionButton=function handleActionButton(){var buttons=document.querySelectorAll('[data-kt-table-widget-4=\"expand_row\"]');// Sample row items counter --- for demo purpose only, remove this variable in your project\nvar rowItems=[3,1,3,1,2,1];buttons.forEach(function(button,index){button.addEventListener(\"click\",function(e){e.stopImmediatePropagation();e.preventDefault();var row=button.closest(\"tr\");var rowClasses=[\"isOpen\",\"border-bottom-0\"];// Get total number of items to generate --- for demo purpose only, remove this code snippet in your project\nvar demoData=[];for(var j=0;j<rowItems[index];j++){demoData.push(data[j]);}// End of generating demo data\n// Handle subtable expanded state\nif(row.classList.contains(\"isOpen\")){var _row$classList;// Remove all subtables from current order row\nwhile(row.nextSibling&&row.nextSibling.getAttribute(\"data-kt-table-widget-4\")===\"subtable_template\"){row.nextSibling.parentNode.removeChild(row.nextSibling);}(_row$classList=row.classList).remove.apply(_row$classList,rowClasses);button.classList.remove(\"active\");}else{var _row$classList2;populateTemplate(demoData,row);(_row$classList2=row.classList).add.apply(_row$classList2,rowClasses);button.classList.add(\"active\");}});});};// Populate template with content/data -- content/data can be replaced with relevant data from database or API\nvar populateTemplate=function populateTemplate(data,target){data.forEach(function(d,index){// Clone template node\nvar newTemplate=template.cloneNode(true);// Stock badges\nvar lowStock=\"<div class=\\\"badge badge-light-warning\\\">Low Stock</div>\";var inStock=\"<div class=\\\"badge badge-light-success\\\">In Stock</div>\";// Select data elements\nvar image=newTemplate.querySelector('[data-kt-table-widget-4=\"template_image\"]');var name=newTemplate.querySelector('[data-kt-table-widget-4=\"template_name\"]');var description=newTemplate.querySelector('[data-kt-table-widget-4=\"template_description\"]');var cost=newTemplate.querySelector('[data-kt-table-widget-4=\"template_cost\"]');var qty=newTemplate.querySelector('[data-kt-table-widget-4=\"template_qty\"]');var total=newTemplate.querySelector('[data-kt-table-widget-4=\"template_total\"]');var stock=newTemplate.querySelector('[data-kt-table-widget-4=\"template_stock\"]');// Populate elements with data\nvar imageSrc=image.getAttribute(\"data-kt-src-path\");image.setAttribute(\"src\",imageSrc+d.image+\".gif\");name.innerText=d.name;description.innerText=d.description;cost.innerText=d.cost;qty.innerText=d.qty;total.innerText=d.total;if(d.stock>10){stock.innerHTML=inStock;}else{stock.innerHTML=lowStock;}// New template border controller\n// When only 1 row is available\nif(data.length===1){//let borderClasses = ['rounded', 'rounded-end-0'];\n//newTemplate.querySelectorAll('td')[0].classList.add(...borderClasses);\n//borderClasses = ['rounded', 'rounded-start-0'];\n//newTemplate.querySelectorAll('td')[4].classList.add(...borderClasses);\n// Remove bottom border\n//newTemplate.classList.add('border-bottom-0');\n}else{// When multiple rows detected\nif(index===data.length-1){// first row\n//let borderClasses = ['rounded-start', 'rounded-bottom-0'];\n// newTemplate.querySelectorAll('td')[0].classList.add(...borderClasses);\n//borderClasses = ['rounded-end', 'rounded-bottom-0'];\n//newTemplate.querySelectorAll('td')[4].classList.add(...borderClasses);\n}if(index===0){// last row\n//let borderClasses = ['rounded-start', 'rounded-top-0'];\n//newTemplate.querySelectorAll('td')[0].classList.add(...borderClasses);\n//borderClasses = ['rounded-end', 'rounded-top-0'];\n//newTemplate.querySelectorAll('td')[4].classList.add(...borderClasses);\n// Remove bottom border on last row\n//newTemplate.classList.add('border-bottom-0');\n}}// Insert new template into table\nvar tbody=table.querySelector(\"tbody\");tbody.insertBefore(newTemplate,target.nextSibling);});};// Reset subtable\nvar resetSubtable=function resetSubtable(){var subtables=document.querySelectorAll('[data-kt-table-widget-4=\"subtable_template\"]');subtables.forEach(function(st){st.parentNode.removeChild(st);});var rows=table.querySelectorAll(\"tbody tr\");rows.forEach(function(r){r.classList.remove(\"isOpen\");if(r.querySelector('[data-kt-table-widget-4=\"expand_row\"]')){r.querySelector('[data-kt-table-widget-4=\"expand_row\"]').classList.remove(\"active\");}});};// Public methods\nreturn{init:function init(){table=document.querySelector(\"#kt_table_widget_4_table\");if(!table){return;}initDatatable();handleSearchDatatable();handleStatusFilter();handleActionButton();}};}();// Webpack support\nif(true){module.exports=KTTablesWidget4;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTTablesWidget4.init();});\"use strict\";// Class definition\nvar KTTablesWidget5=function(){var table;var datatable;// Private methods\nvar initDatatable=function initDatatable(){// Set date data order\nvar tableRows=table.querySelectorAll(\"tbody tr\");tableRows.forEach(function(row){var dateRow=row.querySelectorAll(\"td\");var realDate=moment(dateRow[2].innerHTML,\"MMM DD, YYYY\").format();// select date from 3rd column in table\ndateRow[2].setAttribute(\"data-order\",realDate);});// Init datatable --- more info on datatables: https://datatables.net/manual/\ndatatable=$(table).DataTable({info:false,order:[],lengthChange:false,pageLength:6,paging:false,columnDefs:[{orderable:false,targets:1}// Disable ordering on column 1 (product id)\n]});};// Handle status filter\nvar handleStatusFilter=function handleStatusFilter(){var select=document.querySelector('[data-kt-table-widget-5=\"filter_status\"]');$(select).on(\"select2:select\",function(e){var value=$(this).val();if(value===\"Show All\"){datatable.search(\"\").draw();}else{datatable.search(value).draw();}});};// Public methods\nreturn{init:function init(){table=document.querySelector(\"#kt_table_widget_5_table\");if(!table){return;}initDatatable();handleStatusFilter();}};}();// Webpack support\nif(true){module.exports=KTTablesWidget5;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTTablesWidget5.init();});\"use strict\";// Class definition\nvar KTTimelineWidget1=function(){// Private methods\n// Day timeline\nvar initTimelineDay=function initTimelineDay(){// Detect element\nvar element=document.querySelector(\"#kt_timeline_widget_1_1\");if(!element){return;}if(element.innerHTML){return;}// Set variables\nvar now=Date.now();var rootImagePath=element.getAttribute(\"data-kt-timeline-widget-1-image-root\");// Build vis-timeline datasets\nvar groups=new vis.DataSet([{id:\"research\",content:\"Research\",order:1},{id:\"qa\",content:\"Phase 2.6 QA\",order:2},{id:\"ui\",content:\"UI Design\",order:3},{id:\"dev\",content:\"Development\",order:4}]);var items=new vis.DataSet([{id:1,group:\"research\",start:now,end:moment(now).add(1.5,\"hours\"),content:\"Meeting\",progress:\"60%\",color:\"primary\",users:[\"avatars/300-6.jpg\",\"avatars/300-1.jpg\"]},{id:2,group:\"qa\",start:moment(now).add(1,\"hours\"),end:moment(now).add(2,\"hours\"),content:\"Testing\",progress:\"47%\",color:\"success\",users:[\"avatars/300-2.jpg\"]},{id:3,group:\"ui\",start:moment(now).add(30,\"minutes\"),end:moment(now).add(2.5,\"hours\"),content:\"Landing page\",progress:\"55%\",color:\"danger\",users:[\"avatars/300-5.jpg\",\"avatars/300-20.jpg\"]},{id:4,group:\"dev\",start:moment(now).add(1.5,\"hours\"),end:moment(now).add(3,\"hours\"),content:\"Products module\",progress:\"75%\",color:\"info\",users:[\"avatars/300-23.jpg\",\"avatars/300-12.jpg\",\"avatars/300-9.jpg\"]}]);// Set vis-timeline options\nvar options={zoomable:false,moveable:false,selectable:false,// More options https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nmargin:{item:{horizontal:10,vertical:35}},// Remove current time line --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nshowCurrentTime:false,// Whitelist specified tags and attributes from template --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nxss:{disabled:false,filterOptions:{whiteList:{div:[\"class\",\"style\"],img:[\"data-kt-timeline-avatar-src\",\"alt\"],a:[\"href\",\"class\"]}}},// specify a template for the items\ntemplate:function template(item){// Build users group\nvar users=item.users;var userTemplate=\"\";users.forEach(function(user){userTemplate+=\"<div class=\\\"symbol symbol-circle symbol-25px\\\"><img data-kt-timeline-avatar-src=\\\"\".concat(rootImagePath+user,\"\\\" alt=\\\"\\\" /></div>\");});return\"<div class=\\\"rounded-pill bg-light-\".concat(item.color,\" d-flex align-items-center position-relative h-40px w-100 p-2 overflow-hidden\\\">\\n                    <div class=\\\"position-absolute rounded-pill d-block bg-\").concat(item.color,\" start-0 top-0 h-100 z-index-1\\\" style=\\\"width: \").concat(item.progress,\";\\\"></div>\\n        \\n                    <div class=\\\"d-flex align-items-center position-relative z-index-2\\\">\\n                        <div class=\\\"symbol-group symbol-hover flex-nowrap me-3\\\">\\n                            \").concat(userTemplate,\"\\n                        </div>\\n        \\n                        <a href=\\\"#\\\" class=\\\"fw-bold text-white text-hover-dark\\\">\").concat(item.content,\"</a>\\n                    </div>\\n        \\n                    <div class=\\\"d-flex flex-center bg-body rounded-pill fs-7 fw-bolder ms-auto h-100 px-3 position-relative z-index-2\\\">\\n                        \").concat(item.progress,\"\\n                    </div>\\n                </div>        \\n                \");},// Remove block ui on initial draw\nonInitialDrawComplete:function onInitialDrawComplete(){handleAvatarPath();var target=element.closest('[data-kt-timeline-widget-1-blockui=\"true\"]');var blockUI=KTBlockUI.getInstance(target);if(blockUI.isBlocked()){setTimeout(function(){blockUI.release();},1000);}}};// Init vis-timeline\nvar timeline=new vis.Timeline(element,items,groups,options);// Prevent infinite loop draws\ntimeline.on(\"currentTimeTick\",function(){// After fired the first time we un-subscribed\ntimeline.off(\"currentTimeTick\");});};// Week timeline\nvar initTimelineWeek=function initTimelineWeek(){// Detect element\nvar element=document.querySelector(\"#kt_timeline_widget_1_2\");if(!element){return;}if(element.innerHTML){return;}// Set variables\nvar now=Date.now();var rootImagePath=element.getAttribute(\"data-kt-timeline-widget-1-image-root\");// Build vis-timeline datasets\nvar groups=new vis.DataSet([{id:1,content:\"Research\",order:1},{id:2,content:\"Phase 2.6 QA\",order:2},{id:3,content:\"UI Design\",order:3},{id:4,content:\"Development\",order:4}]);var items=new vis.DataSet([{id:1,group:1,start:now,end:moment(now).add(7,\"days\"),content:\"Framework\",progress:\"71%\",color:\"primary\",users:[\"avatars/300-6.jpg\",\"avatars/300-1.jpg\"]},{id:2,group:2,start:moment(now).add(7,\"days\"),end:moment(now).add(14,\"days\"),content:\"Accessibility\",progress:\"84%\",color:\"success\",users:[\"avatars/300-2.jpg\"]},{id:3,group:3,start:moment(now).add(3,\"days\"),end:moment(now).add(20,\"days\"),content:\"Microsites\",progress:\"69%\",color:\"danger\",users:[\"avatars/300-5.jpg\",\"avatars/300-20.jpg\"]},{id:4,group:4,start:moment(now).add(10,\"days\"),end:moment(now).add(21,\"days\"),content:\"Deployment\",progress:\"74%\",color:\"info\",users:[\"avatars/300-23.jpg\",\"avatars/300-12.jpg\",\"avatars/300-9.jpg\"]}]);// Set vis-timeline options\nvar options={zoomable:false,moveable:false,selectable:false,// More options https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nmargin:{item:{horizontal:10,vertical:35}},// Remove current time line --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nshowCurrentTime:false,// Whitelist specified tags and attributes from template --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nxss:{disabled:false,filterOptions:{whiteList:{div:[\"class\",\"style\"],img:[\"data-kt-timeline-avatar-src\",\"alt\"],a:[\"href\",\"class\"]}}},// specify a template for the items\ntemplate:function template(item){// Build users group\nvar users=item.users;var userTemplate=\"\";users.forEach(function(user){userTemplate+=\"<div class=\\\"symbol symbol-circle symbol-25px\\\"><img data-kt-timeline-avatar-src=\\\"\".concat(rootImagePath+user,\"\\\" alt=\\\"\\\" /></div>\");});return\"<div class=\\\"rounded-pill bg-light-\".concat(item.color,\" d-flex align-items-center position-relative h-40px w-100 p-2 overflow-hidden\\\">\\n                    <div class=\\\"position-absolute rounded-pill d-block bg-\").concat(item.color,\" start-0 top-0 h-100 z-index-1\\\" style=\\\"width: \").concat(item.progress,\";\\\"></div>\\n        \\n                    <div class=\\\"d-flex align-items-center position-relative z-index-2\\\">\\n                        <div class=\\\"symbol-group symbol-hover flex-nowrap me-3\\\">\\n                            \").concat(userTemplate,\"\\n                        </div>\\n        \\n                        <a href=\\\"#\\\" class=\\\"fw-bold text-white text-hover-dark\\\">\").concat(item.content,\"</a>\\n                    </div>\\n        \\n                    <div class=\\\"d-flex flex-center bg-body rounded-pill fs-7 fw-bolder ms-auto h-100 px-3 position-relative z-index-2\\\">\\n                        \").concat(item.progress,\"\\n                    </div>\\n                </div>        \\n                \");},// Remove block ui on initial draw\nonInitialDrawComplete:function onInitialDrawComplete(){handleAvatarPath();var target=element.closest('[data-kt-timeline-widget-1-blockui=\"true\"]');var blockUI=KTBlockUI.getInstance(target);if(blockUI.isBlocked()){setTimeout(function(){blockUI.release();},1000);}}};// Init vis-timeline\nvar timeline=new vis.Timeline(element,items,groups,options);// Prevent infinite loop draws\ntimeline.on(\"currentTimeTick\",function(){// After fired the first time we un-subscribed\ntimeline.off(\"currentTimeTick\");});};// Month timeline\nvar initTimelineMonth=function initTimelineMonth(){// Detect element\nvar element=document.querySelector(\"#kt_timeline_widget_1_3\");if(!element){return;}if(element.innerHTML){return;}// Set variables\nvar now=Date.now();var rootImagePath=element.getAttribute(\"data-kt-timeline-widget-1-image-root\");// Build vis-timeline datasets\nvar groups=new vis.DataSet([{id:\"research\",content:\"Research\",order:1},{id:\"qa\",content:\"Phase 2.6 QA\",order:2},{id:\"ui\",content:\"UI Design\",order:3},{id:\"dev\",content:\"Development\",order:4}]);var items=new vis.DataSet([{id:1,group:\"research\",start:now,end:moment(now).add(2,\"months\"),content:\"Tags\",progress:\"79%\",color:\"primary\",users:[\"avatars/300-6.jpg\",\"avatars/300-1.jpg\"]},{id:2,group:\"qa\",start:moment(now).add(0.5,\"months\"),end:moment(now).add(5,\"months\"),content:\"Testing\",progress:\"64%\",color:\"success\",users:[\"avatars/300-2.jpg\"]},{id:3,group:\"ui\",start:moment(now).add(2,\"months\"),end:moment(now).add(6.5,\"months\"),content:\"Media\",progress:\"82%\",color:\"danger\",users:[\"avatars/300-5.jpg\",\"avatars/300-20.jpg\"]},{id:4,group:\"dev\",start:moment(now).add(4,\"months\"),end:moment(now).add(7,\"months\"),content:\"Plugins\",progress:\"58%\",color:\"info\",users:[\"avatars/300-23.jpg\",\"avatars/300-12.jpg\",\"avatars/300-9.jpg\"]}]);// Set vis-timeline options\nvar options={zoomable:false,moveable:false,selectable:false,// More options https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nmargin:{item:{horizontal:10,vertical:35}},// Remove current time line --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nshowCurrentTime:false,// Whitelist specified tags and attributes from template --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nxss:{disabled:false,filterOptions:{whiteList:{div:[\"class\",\"style\"],img:[\"data-kt-timeline-avatar-src\",\"alt\"],a:[\"href\",\"class\"]}}},// specify a template for the items\ntemplate:function template(item){// Build users group\nvar users=item.users;var userTemplate=\"\";users.forEach(function(user){userTemplate+=\"<div class=\\\"symbol symbol-circle symbol-25px\\\"><img data-kt-timeline-avatar-src=\\\"\".concat(rootImagePath+user,\"\\\" alt=\\\"\\\" /></div>\");});return\"<div class=\\\"rounded-pill bg-light-\".concat(item.color,\" d-flex align-items-center position-relative h-40px w-100 p-2 overflow-hidden\\\">\\n                    <div class=\\\"position-absolute rounded-pill d-block bg-\").concat(item.color,\" start-0 top-0 h-100 z-index-1\\\" style=\\\"width: \").concat(item.progress,\";\\\"></div>\\n        \\n                    <div class=\\\"d-flex align-items-center position-relative z-index-2\\\">\\n                        <div class=\\\"symbol-group symbol-hover flex-nowrap me-3\\\">\\n                            \").concat(userTemplate,\"\\n                        </div>\\n        \\n                        <a href=\\\"#\\\" class=\\\"fw-bold text-white text-hover-dark\\\">\").concat(item.content,\"</a>\\n                    </div>\\n        \\n                    <div class=\\\"d-flex flex-center bg-body rounded-pill fs-7 fw-bolder ms-auto h-100 px-3 position-relative z-index-2\\\">\\n                        \").concat(item.progress,\"\\n                    </div>\\n                </div>        \\n                \");},// Remove block ui on initial draw\nonInitialDrawComplete:function onInitialDrawComplete(){handleAvatarPath();var target=element.closest('[data-kt-timeline-widget-1-blockui=\"true\"]');var blockUI=KTBlockUI.getInstance(target);if(blockUI.isBlocked()){setTimeout(function(){blockUI.release();},1000);}}};// Init vis-timeline\nvar timeline=new vis.Timeline(element,items,groups,options);// Prevent infinite loop draws\ntimeline.on(\"currentTimeTick\",function(){// After fired the first time we un-subscribed\ntimeline.off(\"currentTimeTick\");});};// Handle BlockUI\nvar handleBlockUI=function handleBlockUI(){// Select block ui elements\nvar elements=document.querySelectorAll('[data-kt-timeline-widget-1-blockui=\"true\"]');// Init block ui\nelements.forEach(function(element){var blockUI=new KTBlockUI(element,{overlayClass:\"bg-body\"});blockUI.block();});};// Handle tabs visibility\nvar tabsVisibility=function tabsVisibility(){var tabs=document.querySelectorAll('[data-kt-timeline-widget-1=\"tab\"]');tabs.forEach(function(tab){tab.addEventListener(\"shown.bs.tab\",function(e){// Week tab\nif(tab.getAttribute(\"href\")===\"#kt_timeline_widget_1_tab_week\"){initTimelineWeek();}// Month tab\nif(tab.getAttribute(\"href\")===\"#kt_timeline_widget_1_tab_month\"){initTimelineMonth();}});});};// Handle avatar path conflict\nvar handleAvatarPath=function handleAvatarPath(){var avatars=document.querySelectorAll(\"[data-kt-timeline-avatar-src]\");if(!avatars){return;}avatars.forEach(function(avatar){avatar.setAttribute(\"src\",avatar.getAttribute(\"data-kt-timeline-avatar-src\"));avatar.removeAttribute(\"data-kt-timeline-avatar-src\");});};// Public methods\nreturn{init:function init(){initTimelineDay();handleBlockUI();tabsVisibility();}};}();// Webpack support\nif(true){module.exports=KTTimelineWidget1;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTTimelineWidget1.init();});\"use strict\";// Class definition\nvar KTTimelineWidget2=function(){// Private methods\nvar handleCheckbox=function handleCheckbox(){var card=document.querySelector(\"#kt_timeline_widget_2_card\");if(!card){return;}// Checkbox Handler\nKTUtil.on(card,'[data-kt-element=\"checkbox\"]',\"change\",function(e){var check=this.closest(\".form-check\");var tr=this.closest(\"tr\");var bullet=tr.querySelector('[data-kt-element=\"bullet\"]');var status=tr.querySelector('[data-kt-element=\"status\"]');if(this.checked===true){check.classList.add(\"form-check-success\");bullet.classList.remove(\"bg-primary\");bullet.classList.add(\"bg-success\");status.innerText=\"Done\";status.classList.remove(\"badge-light-primary\");status.classList.add(\"badge-light-success\");}else{check.classList.remove(\"form-check-success\");bullet.classList.remove(\"bg-success\");bullet.classList.add(\"bg-primary\");status.innerText=\"In Process\";status.classList.remove(\"badge-light-success\");status.classList.add(\"badge-light-primary\");}});};// Public methods\nreturn{init:function init(){handleCheckbox();}};}();// Webpack support\nif(true){module.exports=KTTimelineWidget2;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTTimelineWidget2.init();});\"use strict\";// Class definition\nvar KTTimelineWidget4=function(){// Private methods\n// Day timeline\nvar initTimelineDay=function initTimelineDay(){// Detect element\nvar element=document.querySelector(\"#kt_timeline_widget_4_1\");if(!element){return;}if(element.innerHTML){return;}// Set variables\nvar now=Date.now();var rootImagePath=element.getAttribute(\"data-kt-timeline-widget-4-image-root\");// Build vis-timeline datasets\nvar groups=new vis.DataSet([{id:\"research\",content:\"Research\",order:1},{id:\"qa\",content:\"Phase 2.6 QA\",order:2},{id:\"ui\",content:\"UI Design\",order:3},{id:\"dev\",content:\"Development\",order:4}]);var items=new vis.DataSet([{id:1,group:\"research\",start:now,end:moment(now).add(1.5,\"hours\"),content:\"Meeting\",progress:\"60%\",color:\"primary\",users:[\"avatars/300-6.jpg\",\"avatars/300-1.jpg\"]},{id:2,group:\"qa\",start:moment(now).add(1,\"hours\"),end:moment(now).add(2,\"hours\"),content:\"Testing\",progress:\"47%\",color:\"success\",users:[\"avatars/300-2.jpg\"]},{id:3,group:\"ui\",start:moment(now).add(30,\"minutes\"),end:moment(now).add(2.5,\"hours\"),content:\"Landing page\",progress:\"55%\",color:\"danger\",users:[\"avatars/300-5.jpg\",\"avatars/300-20.jpg\"]},{id:4,group:\"dev\",start:moment(now).add(1.5,\"hours\"),end:moment(now).add(3,\"hours\"),content:\"Products module\",progress:\"75%\",color:\"info\",users:[\"avatars/300-23.jpg\",\"avatars/300-12.jpg\",\"avatars/300-9.jpg\"]}]);// Set vis-timeline options\nvar options={zoomable:false,moveable:false,selectable:false,// More options https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nmargin:{item:{horizontal:10,vertical:35}},// Remove current time line --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nshowCurrentTime:false,// Whitelist specified tags and attributes from template --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nxss:{disabled:false,filterOptions:{whiteList:{div:[\"class\",\"style\"],img:[\"data-kt-timeline-avatar-src\",\"alt\"],a:[\"href\",\"class\"]}}},// specify a template for the items\ntemplate:function template(item){// Build users group\nvar users=item.users;var userTemplate=\"\";users.forEach(function(user){userTemplate+=\"<div class=\\\"symbol symbol-circle symbol-25px\\\"><img data-kt-timeline-avatar-src=\\\"\".concat(rootImagePath+user,\"\\\" alt=\\\"\\\" /></div>\");});return\"<div class=\\\"rounded-pill bg-light-\".concat(item.color,\" d-flex align-items-center position-relative h-40px w-100 p-2 overflow-hidden\\\">\\n                    <div class=\\\"position-absolute rounded-pill d-block bg-\").concat(item.color,\" start-0 top-0 h-100 z-index-1\\\" style=\\\"width: \").concat(item.progress,\";\\\"></div>\\n        \\n                    <div class=\\\"d-flex align-items-center position-relative z-index-2\\\">\\n                        <div class=\\\"symbol-group symbol-hover flex-nowrap me-3\\\">\\n                            \").concat(userTemplate,\"\\n                        </div>\\n        \\n                        <a href=\\\"#\\\" class=\\\"fw-bold text-white text-hover-dark\\\">\").concat(item.content,\"</a>\\n                    </div>\\n        \\n                    <div class=\\\"d-flex flex-center bg-body rounded-pill fs-7 fw-bolder ms-auto h-100 px-3 position-relative z-index-2\\\">\\n                        \").concat(item.progress,\"\\n                    </div>\\n                </div>        \\n                \");},// Remove block ui on initial draw\nonInitialDrawComplete:function onInitialDrawComplete(){handleAvatarPath();var target=element.closest('[data-kt-timeline-widget-4-blockui=\"true\"]');var blockUI=KTBlockUI.getInstance(target);if(blockUI.isBlocked()){setTimeout(function(){blockUI.release();},1000);}}};// Init vis-timeline\nvar timeline=new vis.Timeline(element,items,groups,options);// Prevent infinite loop draws\ntimeline.on(\"currentTimeTick\",function(){// After fired the first time we un-subscribed\ntimeline.off(\"currentTimeTick\");});};// Week timeline\nvar initTimelineWeek=function initTimelineWeek(){// Detect element\nvar element=document.querySelector(\"#kt_timeline_widget_4_2\");if(!element){return;}if(element.innerHTML){return;}// Set variables\nvar now=Date.now();var rootImagePath=element.getAttribute(\"data-kt-timeline-widget-4-image-root\");// Build vis-timeline datasets\nvar groups=new vis.DataSet([{id:1,content:\"Research\",order:1},{id:2,content:\"Phase 2.6 QA\",order:2},{id:3,content:\"UI Design\",order:3},{id:4,content:\"Development\",order:4}]);var items=new vis.DataSet([{id:1,group:1,start:now,end:moment(now).add(7,\"days\"),content:\"Framework\",progress:\"71%\",color:\"primary\",users:[\"avatars/300-6.jpg\",\"avatars/300-1.jpg\"]},{id:2,group:2,start:moment(now).add(7,\"days\"),end:moment(now).add(14,\"days\"),content:\"Accessibility\",progress:\"84%\",color:\"success\",users:[\"avatars/300-2.jpg\"]},{id:3,group:3,start:moment(now).add(3,\"days\"),end:moment(now).add(20,\"days\"),content:\"Microsites\",progress:\"69%\",color:\"danger\",users:[\"avatars/300-5.jpg\",\"avatars/300-20.jpg\"]},{id:4,group:4,start:moment(now).add(10,\"days\"),end:moment(now).add(21,\"days\"),content:\"Deployment\",progress:\"74%\",color:\"info\",users:[\"avatars/300-23.jpg\",\"avatars/300-12.jpg\",\"avatars/300-9.jpg\"]}]);// Set vis-timeline options\nvar options={zoomable:false,moveable:false,selectable:false,// More options https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nmargin:{item:{horizontal:10,vertical:35}},// Remove current time line --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nshowCurrentTime:false,// Whitelist specified tags and attributes from template --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nxss:{disabled:false,filterOptions:{whiteList:{div:[\"class\",\"style\"],img:[\"data-kt-timeline-avatar-src\",\"alt\"],a:[\"href\",\"class\"]}}},// specify a template for the items\ntemplate:function template(item){// Build users group\nvar users=item.users;var userTemplate=\"\";users.forEach(function(user){userTemplate+=\"<div class=\\\"symbol symbol-circle symbol-25px\\\"><img data-kt-timeline-avatar-src=\\\"\".concat(rootImagePath+user,\"\\\" alt=\\\"\\\" /></div>\");});return\"<div class=\\\"rounded-pill bg-light-\".concat(item.color,\" d-flex align-items-center position-relative h-40px w-100 p-2 overflow-hidden\\\">\\n                    <div class=\\\"position-absolute rounded-pill d-block bg-\").concat(item.color,\" start-0 top-0 h-100 z-index-1\\\" style=\\\"width: \").concat(item.progress,\";\\\"></div>\\n        \\n                    <div class=\\\"d-flex align-items-center position-relative z-index-2\\\">\\n                        <div class=\\\"symbol-group symbol-hover flex-nowrap me-3\\\">\\n                            \").concat(userTemplate,\"\\n                        </div>\\n        \\n                        <a href=\\\"#\\\" class=\\\"fw-bold text-white text-hover-dark\\\">\").concat(item.content,\"</a>\\n                    </div>\\n        \\n                    <div class=\\\"d-flex flex-center bg-body rounded-pill fs-7 fw-bolder ms-auto h-100 px-3 position-relative z-index-2\\\">\\n                        \").concat(item.progress,\"\\n                    </div>\\n                </div>        \\n                \");},// Remove block ui on initial draw\nonInitialDrawComplete:function onInitialDrawComplete(){handleAvatarPath();var target=element.closest('[data-kt-timeline-widget-4-blockui=\"true\"]');var blockUI=KTBlockUI.getInstance(target);if(blockUI.isBlocked()){setTimeout(function(){blockUI.release();},1000);}}};// Init vis-timeline\nvar timeline=new vis.Timeline(element,items,groups,options);// Prevent infinite loop draws\ntimeline.on(\"currentTimeTick\",function(){// After fired the first time we un-subscribed\ntimeline.off(\"currentTimeTick\");});};// Month timeline\nvar initTimelineMonth=function initTimelineMonth(){// Detect element\nvar element=document.querySelector(\"#kt_timeline_widget_4_3\");if(!element){return;}if(element.innerHTML){return;}// Set variables\nvar now=Date.now();var rootImagePath=element.getAttribute(\"data-kt-timeline-widget-4-image-root\");// Build vis-timeline datasets\nvar groups=new vis.DataSet([{id:\"research\",content:\"Research\",order:1},{id:\"qa\",content:\"Phase 2.6 QA\",order:2},{id:\"ui\",content:\"UI Design\",order:3},{id:\"dev\",content:\"Development\",order:4}]);var items=new vis.DataSet([{id:1,group:\"research\",start:now,end:moment(now).add(2,\"months\"),content:\"Tags\",progress:\"79%\",color:\"primary\",users:[\"avatars/300-6.jpg\",\"avatars/300-1.jpg\"]},{id:2,group:\"qa\",start:moment(now).add(0.5,\"months\"),end:moment(now).add(5,\"months\"),content:\"Testing\",progress:\"64%\",color:\"success\",users:[\"avatars/300-2.jpg\"]},{id:3,group:\"ui\",start:moment(now).add(2,\"months\"),end:moment(now).add(6.5,\"months\"),content:\"Media\",progress:\"82%\",color:\"danger\",users:[\"avatars/300-5.jpg\",\"avatars/300-20.jpg\"]},{id:4,group:\"dev\",start:moment(now).add(4,\"months\"),end:moment(now).add(7,\"months\"),content:\"Plugins\",progress:\"58%\",color:\"info\",users:[\"avatars/300-23.jpg\",\"avatars/300-12.jpg\",\"avatars/300-9.jpg\"]}]);// Set vis-timeline options\nvar options={zoomable:false,moveable:false,selectable:false,// More options https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nmargin:{item:{horizontal:10,vertical:35}},// Remove current time line --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nshowCurrentTime:false,// Whitelist specified tags and attributes from template --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nxss:{disabled:false,filterOptions:{whiteList:{div:[\"class\",\"style\"],img:[\"data-kt-timeline-avatar-src\",\"alt\"],a:[\"href\",\"class\"]}}},// specify a template for the items\ntemplate:function template(item){// Build users group\nvar users=item.users;var userTemplate=\"\";users.forEach(function(user){userTemplate+=\"<div class=\\\"symbol symbol-circle symbol-25px\\\"><img data-kt-timeline-avatar-src=\\\"\".concat(rootImagePath+user,\"\\\" alt=\\\"\\\" /></div>\");});return\"<div class=\\\"rounded-pill bg-light-\".concat(item.color,\" d-flex align-items-center position-relative h-40px w-100 p-2 overflow-hidden\\\">\\n                    <div class=\\\"position-absolute rounded-pill d-block bg-\").concat(item.color,\" start-0 top-0 h-100 z-index-1\\\" style=\\\"width: \").concat(item.progress,\";\\\"></div>\\n        \\n                    <div class=\\\"d-flex align-items-center position-relative z-index-2\\\">\\n                        <div class=\\\"symbol-group symbol-hover flex-nowrap me-3\\\">\\n                            \").concat(userTemplate,\"\\n                        </div>\\n        \\n                        <a href=\\\"#\\\" class=\\\"fw-bold text-white text-hover-dark\\\">\").concat(item.content,\"</a>\\n                    </div>\\n        \\n                    <div class=\\\"d-flex flex-center bg-body rounded-pill fs-7 fw-bolder ms-auto h-100 px-3 position-relative z-index-2\\\">\\n                        \").concat(item.progress,\"\\n                    </div>\\n                </div>        \\n                \");},// Remove block ui on initial draw\nonInitialDrawComplete:function onInitialDrawComplete(){handleAvatarPath();var target=element.closest('[data-kt-timeline-widget-4-blockui=\"true\"]');var blockUI=KTBlockUI.getInstance(target);if(blockUI.isBlocked()){setTimeout(function(){blockUI.release();},1000);}}};// Init vis-timeline\nvar timeline=new vis.Timeline(element,items,groups,options);// Prevent infinite loop draws\ntimeline.on(\"currentTimeTick\",function(){// After fired the first time we un-subscribed\ntimeline.off(\"currentTimeTick\");});};// 2022 timeline\nvar initTimeline2022=function initTimeline2022(){// Detect element\nvar element=document.querySelector(\"#kt_timeline_widget_4_4\");if(!element){return;}if(element.innerHTML){return;}// Set variables\nvar now=Date.now();var rootImagePath=element.getAttribute(\"data-kt-timeline-widget-4-image-root\");// Build vis-timeline datasets\nvar groups=new vis.DataSet([{id:\"research\",content:\"Research\",order:1},{id:\"qa\",content:\"Phase 2.6 QA\",order:2},{id:\"ui\",content:\"UI Design\",order:3},{id:\"dev\",content:\"Development\",order:4}]);var items=new vis.DataSet([{id:1,group:\"research\",start:now,end:moment(now).add(2,\"months\"),content:\"Tags\",progress:\"51%\",color:\"primary\",users:[\"avatars/300-7.jpg\",\"avatars/300-2.jpg\"]},{id:2,group:\"qa\",start:moment(now).add(0.5,\"months\"),end:moment(now).add(5,\"months\"),content:\"Testing\",progress:\"64%\",color:\"success\",users:[\"avatars/300-2.jpg\"]},{id:3,group:\"ui\",start:moment(now).add(2,\"months\"),end:moment(now).add(6.5,\"months\"),content:\"Media\",progress:\"54%\",color:\"danger\",users:[\"avatars/300-5.jpg\",\"avatars/300-21.jpg\"]},{id:4,group:\"dev\",start:moment(now).add(4,\"months\"),end:moment(now).add(7,\"months\"),content:\"Plugins\",progress:\"348%\",color:\"info\",users:[\"avatars/300-3.jpg\",\"avatars/300-11.jpg\",\"avatars/300-13.jpg\"]}]);// Set vis-timeline options\nvar options={zoomable:false,moveable:false,selectable:false,// More options https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nmargin:{item:{horizontal:10,vertical:35}},// Remove current time line --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nshowCurrentTime:false,// Whitelist specified tags and attributes from template --- more info: https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\nxss:{disabled:false,filterOptions:{whiteList:{div:[\"class\",\"style\"],img:[\"data-kt-timeline-avatar-src\",\"alt\"],a:[\"href\",\"class\"]}}},// specify a template for the items\ntemplate:function template(item){// Build users group\nvar users=item.users;var userTemplate=\"\";users.forEach(function(user){userTemplate+=\"<div class=\\\"symbol symbol-circle symbol-25px\\\"><img data-kt-timeline-avatar-src=\\\"\".concat(rootImagePath+user,\"\\\" alt=\\\"\\\" /></div>\");});return\"<div class=\\\"rounded-pill bg-light-\".concat(item.color,\" d-flex align-items-center position-relative h-40px w-100 p-2 overflow-hidden\\\">\\n                    <div class=\\\"position-absolute rounded-pill d-block bg-\").concat(item.color,\" start-0 top-0 h-100 z-index-1\\\" style=\\\"width: \").concat(item.progress,\";\\\"></div>\\n        \\n                    <div class=\\\"d-flex align-items-center position-relative z-index-2\\\">\\n                        <div class=\\\"symbol-group symbol-hover flex-nowrap me-3\\\">\\n                            \").concat(userTemplate,\"\\n                        </div>\\n        \\n                        <a href=\\\"#\\\" class=\\\"fw-bold text-white text-hover-dark\\\">\").concat(item.content,\"</a>\\n                    </div>\\n        \\n                    <div class=\\\"d-flex flex-center bg-body rounded-pill fs-7 fw-bolder ms-auto h-100 px-3 position-relative z-index-2\\\">\\n                        \").concat(item.progress,\"\\n                    </div>\\n                </div>        \\n                \");},// Remove block ui on initial draw\nonInitialDrawComplete:function onInitialDrawComplete(){handleAvatarPath();var target=element.closest('[data-kt-timeline-widget-4-blockui=\"true\"]');var blockUI=KTBlockUI.getInstance(target);if(blockUI.isBlocked()){setTimeout(function(){blockUI.release();},1000);}}};// Init vis-timeline\nvar timeline=new vis.Timeline(element,items,groups,options);// Prevent infinite loop draws\ntimeline.on(\"currentTimeTick\",function(){// After fired the first time we un-subscribed\ntimeline.off(\"currentTimeTick\");});};// Handle BlockUI\nvar handleBlockUI=function handleBlockUI(){// Select block ui elements\nvar elements=document.querySelectorAll('[data-kt-timeline-widget-4-blockui=\"true\"]');// Init block ui\nelements.forEach(function(element){var blockUI=new KTBlockUI(element,{overlayClass:\"bg-body\"});blockUI.block();});};// Handle tabs visibility\nvar tabsVisibility=function tabsVisibility(){var tabs=document.querySelectorAll('[data-kt-timeline-widget-4=\"tab\"]');tabs.forEach(function(tab){tab.addEventListener(\"shown.bs.tab\",function(e){// Week tab\nif(tab.getAttribute(\"href\")===\"#kt_timeline_widget_4_tab_week\"){initTimelineWeek();}// Month tab\nif(tab.getAttribute(\"href\")===\"#kt_timeline_widget_4_tab_month\"){initTimelineMonth();}// 2022 tab\nif(tab.getAttribute(\"href\")===\"#kt_timeline_widget_4_tab_2022\"){initTimeline2022();}});});};// Handle avatar path conflict\nvar handleAvatarPath=function handleAvatarPath(){var avatars=document.querySelectorAll(\"[data-kt-timeline-avatar-src]\");if(!avatars){return;}avatars.forEach(function(avatar){avatar.setAttribute(\"src\",avatar.getAttribute(\"data-kt-timeline-avatar-src\"));avatar.removeAttribute(\"data-kt-timeline-avatar-src\");});};// Public methods\nreturn{init:function init(){initTimelineDay();handleBlockUI();tabsVisibility();}};}();// Webpack support\nif(true){module.exports=KTTimelineWidget4;}// On document ready\nKTUtil.onDOMContentLoaded(function(){KTTimelineWidget4.init();});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/widgets.bundle.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.6.0\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-03-02T17:08Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.6.0\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.6\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2021-02-16\n */\n( function( window ) {\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ( {} ).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpushNative = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" +\n\t\t\"ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5]\n\t\t// or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" +\n\t\twhitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace +\n\t\t\"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\treturn nonHex ?\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\tnonHex :\n\n\t\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t\t// Support: IE <=11+\n\t\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t\t// surrogate pair\n\t\t\thigh < 0 ?\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" +\n\t\t\t\tch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( ( target[ j++ ] = els[ i++ ] ) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t( nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\" ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\tif ( newContext !== context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split( \"|\" ),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[ i ] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( ( cur = cur.nextSibling ) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn ( name === \"input\" || name === \"button\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem && elem.namespaceURI,\n\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n\t// Safari 4 - 5 only, Opera <=11.6 - 12.x only\n\t// IE/Edge & older browsers don't support the :scope pseudo-class.\n\t// Support: Safari 6.0 only\n\t// Safari 6.0 supports :scope but it's an alias of :root there.\n\tsupport.scope = assert( function( el ) {\n\t\tdocElem.appendChild( el ).appendChild( document.createElement( \"div\" ) );\n\t\treturn typeof el.querySelectorAll !== \"undefined\" &&\n\t\t\t!el.querySelectorAll( \":scope fieldset div\" ).length;\n\t} );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert( function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute( \"className\" );\n\t} );\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert( function( el ) {\n\t\tel.appendChild( document.createComment( \"\" ) );\n\t\treturn !el.getElementsByTagName( \"*\" ).length;\n\t} );\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[ \"ID\" ] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[ \"ID\" ] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[ \"TAG\" ] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[ \"CLASS\" ] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {\n\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert( function( el ) {\n\n\t\t\tvar input;\n\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll( \"[msallowcapture^='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"~=\" );\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t\t// Adding a temporary attribute to the document before the selection works\n\t\t\t// around the issue.\n\t\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\t\tinput = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"name\", \"\" );\n\t\t\tel.appendChild( input );\n\t\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\t\trbuggyQSA.push( \":checked\" );\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t\t}\n\n\t\t\t// Support: Firefox <=3.6 - 5 only\n\t\t\t// Old Firefox doesn't throw on a badly-escaped identifier.\n\t\t\tel.querySelectorAll( \"\\\\\\f\" );\n\t\t\trbuggyQSA.push( \"[\\\\r\\\\n\\\\f]\" );\n\t\t} );\n\n\t\tassert( function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll( \"[name=d]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll( \":enabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: Opera 10 - 11 only\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll( \"*,:x\" );\n\t\t\trbuggyQSA.push( \",.*:\" );\n\t\t} );\n\t}\n\n\tif ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector ) ) ) ) {\n\n\t\tassert( function( el ) {\n\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t} );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( \"|\" ) );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t) );\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( ( b = b.parentNode ) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a == document || a.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b == document || b.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\treturn a == document ? -1 :\n\t\t\t\tb == document ? 1 :\n\t\t\t\t/* eslint-enable eqeqeq */\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[ i ] === bp[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[ i ], bp[ i ] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\tap[ i ] == preferredDoc ? -1 :\n\t\t\tbp[ i ] == preferredDoc ? 1 :\n\t\t\t/* eslint-enable eqeqeq */\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t// fragment in IE 9\n\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] ||\n\t\t\t\tmatch[ 5 ] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" ) );\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr[ \"CHILD\" ].test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace +\n\t\t\t\t\t\")\" + className + \"(\" + whitespace + \"|$)\" ) ) && classCache(\n\t\t\t\t\t\tclassName, function( elem ) {\n\t\t\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\t/* eslint-disable max-len */\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\t\"has\": markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\t\"contains\": markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement &&\n\t\t\t\t( !document.hasFocus || document.hasFocus() ) &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn ( nodeName === \"input\" && !!elem.checked ) ||\n\t\t\t\t( nodeName === \"option\" && !!elem.selected );\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[ \"empty\" ]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\t\"last\": createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\t\"eq\": createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\t\"even\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"odd\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"lt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"gt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos[ \"nth\" ] = Expr.pseudos[ \"eq\" ];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rcombinators.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrim, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] ||\n\t\t\t\t\t\t\t( outerCache[ elem.uniqueID ] = {} );\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = uniqueCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts(\n\t\t\t\tselector || \"*\",\n\t\t\t\tcontext.nodeType ? [ context ] : context,\n\t\t\t\t[]\n\t\t\t),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\ttokens\n\t\t\t\t\t\t.slice( 0, i - 1 )\n\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[ \"TAG\" ]( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache(\n\t\t\tselector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers )\n\t\t);\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find[ \"ID\" ]( token.matches[ 0 ]\n\t\t\t\t.replace( runescape, funescape ), context ) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[ \"needsContext\" ].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert( function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute( \"href\" ) === \"#\";\n} ) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert( function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n} ) ) {\n\taddHandle( \"value\", function( elem, _name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert( function( el ) {\n\treturn el.getAttribute( \"disabled\" ) == null;\n} ) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\t\tnull;\n\t\t}\n\t} );\n}\n\nreturn Sizzle;\n\n} )( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t// Support: Chrome 86+\n\t\t\t\t\t\t// In Chrome, if an element having a focusout handler is blurred by\n\t\t\t\t\t\t// clicking outside of it, it invokes the handler synchronously. If\n\t\t\t\t\t\t// that handler calls `.remove()` on the element, the data is cleared,\n\t\t\t\t\t\t// leaving `result` undefined. We need to guard against this.\n\t\t\t\t\t\treturn result && result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\t// Suppress native focus or blur as it's already being fired\n\t\t// in leverageNative.\n\t\t_default: function() {\n\t\t\treturn true;\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is display: block\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\n\t\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/demo1/js/custom/widgets.bundle.js");
/******/ 	
/******/ })()
;